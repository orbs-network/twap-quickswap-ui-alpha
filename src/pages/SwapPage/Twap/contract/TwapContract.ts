/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OrderBid = ContractEventLog<{
  id: string;
  maker: string;
  exchange: string;
  bufferPercent: string;
  bid: [string, string, string, string, string, string];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [string, string, string, string, string, string];
}>;
export type OrderCanceled = ContractEventLog<{
  id: string;
  maker: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type OrderCompleted = ContractEventLog<{
  id: string;
  maker: string;
  exchange: string;
  taker: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OrderCreated = ContractEventLog<{
  id: string;
  maker: string;
  exchange: string;
  ask: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: string;
  2: string;
  3: [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ];
}>;
export type OrderFilled = ContractEventLog<{
  id: string;
  maker: string;
  exchange: string;
  taker: string;
  srcAmountIn: string;
  dstAmountOut: string;
  dstFee: string;
  srcFilledAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;

export interface TWAP extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TWAP;
  clone(): TWAP;
  methods: {
    MAX_BID_WINDOW_SECONDS(): NonPayableTransactionObject<string>;

    MIN_BID_WINDOW_SECONDS(): NonPayableTransactionObject<string>;

    MIN_FILL_DELAY_SECONDS(): NonPayableTransactionObject<string>;

    MIN_OUTBID_PERCENT(): NonPayableTransactionObject<string>;

    PERCENT_BASE(): NonPayableTransactionObject<string>;

    STATUS_CANCELED(): NonPayableTransactionObject<string>;

    STATUS_COMPLETED(): NonPayableTransactionObject<string>;

    VERSION(): NonPayableTransactionObject<string>;

    ask(
      exchange: string,
      srcToken: string,
      dstToken: string,
      srcAmount: number | string | BN,
      srcBidAmount: number | string | BN,
      dstMinAmount: number | string | BN,
      deadline: number | string | BN,
      delay: number | string | BN
    ): NonPayableTransactionObject<string>;

    bid(
      id: number | string | BN,
      exchange: string,
      dstFee: number | string | BN,
      bufferPercent: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    book(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      status: string;
      filledTime: string;
      srcFilledAmount: string;
      ask: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ];
      bid: [string, string, string, string, string, string];
      0: string;
      1: string;
      2: string;
      3: string;
      4: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ];
      5: [string, string, string, string, string, string];
    }>;

    cancel(id: number | string | BN): NonPayableTransactionObject<void>;

    fill(id: number | string | BN): NonPayableTransactionObject<void>;

    length(): NonPayableTransactionObject<string>;

    order(
      id: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ],
        [string, string, string, string, string, string]
      ]
    >;

    prune(id: number | string | BN): NonPayableTransactionObject<void>;

    status(arg0: number | string | BN): NonPayableTransactionObject<string>;
  };
  events: {
    OrderBid(cb?: Callback<OrderBid>): EventEmitter;
    OrderBid(options?: EventOptions, cb?: Callback<OrderBid>): EventEmitter;

    OrderCanceled(cb?: Callback<OrderCanceled>): EventEmitter;
    OrderCanceled(
      options?: EventOptions,
      cb?: Callback<OrderCanceled>
    ): EventEmitter;

    OrderCompleted(cb?: Callback<OrderCompleted>): EventEmitter;
    OrderCompleted(
      options?: EventOptions,
      cb?: Callback<OrderCompleted>
    ): EventEmitter;

    OrderCreated(cb?: Callback<OrderCreated>): EventEmitter;
    OrderCreated(
      options?: EventOptions,
      cb?: Callback<OrderCreated>
    ): EventEmitter;

    OrderFilled(cb?: Callback<OrderFilled>): EventEmitter;
    OrderFilled(
      options?: EventOptions,
      cb?: Callback<OrderFilled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OrderBid", cb: Callback<OrderBid>): void;
  once(event: "OrderBid", options: EventOptions, cb: Callback<OrderBid>): void;

  once(event: "OrderCanceled", cb: Callback<OrderCanceled>): void;
  once(
    event: "OrderCanceled",
    options: EventOptions,
    cb: Callback<OrderCanceled>
  ): void;

  once(event: "OrderCompleted", cb: Callback<OrderCompleted>): void;
  once(
    event: "OrderCompleted",
    options: EventOptions,
    cb: Callback<OrderCompleted>
  ): void;

  once(event: "OrderCreated", cb: Callback<OrderCreated>): void;
  once(
    event: "OrderCreated",
    options: EventOptions,
    cb: Callback<OrderCreated>
  ): void;

  once(event: "OrderFilled", cb: Callback<OrderFilled>): void;
  once(
    event: "OrderFilled",
    options: EventOptions,
    cb: Callback<OrderFilled>
  ): void;
}
