{"version":3,"sources":["../node_modules/@material-ui/icons/esm/ArrowForwardIos.js","pages/AnalyticsPage/AnalyticsInfo.tsx","pages/AnalyticsPage/AnalyticsLiquidityChart.tsx","pages/AnalyticsPage/AnalyticsVolumeChart.tsx","pages/AnalyticsPage/AnalyticsOverview.tsx"],"names":["createSvgIcon","React","d","AnalyticsInfo","data","t","useTranslation","Box","mr","pairCount","toLocaleString","oneDayTxns","oneDayVolumeUSD","GlobalConst","utils","FEEPERCENT","dayjs","extend","utc","AnalyticsLiquidityChart","globalData","useGlobalData","useState","analyticChart","ONE_MONTH_CHART","durationIndex","setDurationIndex","globalChartData","updateGlobalChartData","useEffect","a","getChartData","ALL_CHART","getChartStartTime","newChartData","chartData","getLimitedData","CHART_COUNT","fetchChartData","liquidityPercentClass","getPriceClass","Number","liquidityChangeUSD","yAxisValues","useMemo","dailyVolumes","map","value","totalLiquidityUSD","minVolume","Math","floor","min","maxVolume","ceil","max","values","step","i","push","className","typeTexts","GlobalData","analytics","CHART_DURATION_TEXTS","chartTypes","CHART_DURATIONS","chartType","setChartType","mt","formatCompact","ml","height","px","borderRadius","my","Skeleton","variant","width","format","dates","date","categories","getChartDates","AnalyticsVolumeChart","volumeTypes","volumeTypeTexts","volumeIndex","setVolumeIndex","selectedVolumeIndex","setSelectedVolumeIndex","newWeeklyData","dayItems","weekItems","day","week","liquidityWeeks","forEach","ind","month","formatDateFromTimeStamp","THREE_MONTH_CHART","dateStr","getVolumePercent","volumeData","length","currentVolumeIndex","currentVolumeData","prevVolumeData","currentVolume","prevVolume","weeklyVolumeUSD","dailyVolumeUSD","weeklyVolumeChange","volumeChangeUSD","volumeDates","weekStart","weekEnd","barChartData","volumePercentClass","flex","oneWeekVolume","onHover","onMouseLeave","AnalyticsOverview","history","useHistory","updateGlobalData","topTokens","updateTopTokens","topPairs","updateTopPairs","ethPrice","useEthPrice","price","oneDayPrice","getGlobalData","then","getTopTokens","ANALYTICS_TOKENS_COUNT","getTopPairs","ANALYTICS_PAIRS_COUNT","pairs","formattedPairs","pair","id","getBulkPairData","pairData","mb","Grid","container","spacing","item","xs","sm","md","onClick","ArrowForwardIos","showPagination"],"mappings":"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","file":"static/js/16.ac5c0e4a.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.88 4.12L13.76 12l-7.88 7.88L8 22l10-10L8 2z\"\n}), 'ArrowForwardIos');","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { GlobalConst } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\n\ninterface AnalyticsInfoProps {\n  data: any;\n}\n\nconst AnalyticsInfo: React.FC<AnalyticsInfoProps> = ({ data }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Box mr={5}>\n        <small>\n          {t('pairs')}: {data.pairCount.toLocaleString()}\n        </small>\n      </Box>\n      <Box mr={5}>\n        <small>\n          {t('24hTxs')}: {data.oneDayTxns.toLocaleString()}\n        </small>\n      </Box>\n      <Box>\n        <small>\n          {t('24hFees')}: $\n          {(\n            data.oneDayVolumeUSD * GlobalConst.utils.FEEPERCENT\n          ).toLocaleString()}\n        </small>\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsInfo;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  getPriceClass,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { AreaChart, ChartType } from 'components';\nimport { useTranslation } from 'react-i18next';\ndayjs.extend(utc);\n\nconst AnalyticsLiquidityChart: React.FC = () => {\n  const { t } = useTranslation();\n  const { globalData } = useGlobalData();\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [globalChartData, updateGlobalChartData] = useState<any[] | null>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData) {\n        const chartData = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData(chartData);\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityPercentClass = getPriceClass(\n    globalData ? Number(globalData.liquidityChangeUSD) : 0,\n  );\n\n  const yAxisValues = useMemo(() => {\n    if (globalChartData) {\n      const dailyVolumes: number[] = globalChartData.map((value: any) =>\n        Number(value.totalLiquidityUSD),\n      );\n      // this is for defining the scale for the liquidity values to present in graph. Liquidity values are more than 100M so set the min and max amount with rounding after dividing into 20000000 to show all liquidity values into the graph\n      const minVolume =\n        Math.floor(Math.min(...dailyVolumes) / 20000000) * 20000000;\n      const maxVolume =\n        Math.ceil(Math.max(...dailyVolumes) / 20000000) * 20000000;\n      const values = [];\n      // show 10 values in the y axis of the graph\n      const step = (maxVolume - minVolume) / 10;\n      for (let i = maxVolume; i >= minVolume; i -= step) {\n        values.push(i);\n      }\n      return values;\n    } else {\n      return undefined;\n    }\n  }, [globalChartData]);\n\n  return (\n    <>\n      <Box className='flex justify-between'>\n        <span className='text-disabled text-bold text-uppercase'>\n          {t('liquidity')}\n        </span>\n        <ChartType\n          typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n          chartTypes={GlobalData.analytics.CHART_DURATIONS}\n          chartType={durationIndex}\n          setChartType={setDurationIndex}\n        />\n      </Box>\n      {globalData ? (\n        <Box mt={0.5} className='flex items-center'>\n          <h5>${formatCompact(globalData.totalLiquidityUSD)}</h5>\n          <Box\n            ml={1}\n            height={23}\n            px={1}\n            borderRadius={40}\n            className={liquidityPercentClass}\n          >\n            <span>\n              {`${globalData.liquidityChangeUSD > 0 ? '+' : ''}\n                      ${globalData.liquidityChangeUSD.toLocaleString()}`}\n              %\n            </span>\n          </Box>\n        </Box>\n      ) : (\n        <Box my={0.5}>\n          <Skeleton variant='rect' width='100%' height={24} />\n        </Box>\n      )}\n      <Box>\n        <span className='text-disabled'>\n          {dayjs.utc().format('MMM DD, YYYY')}\n        </span>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <AreaChart\n            data={globalChartData.map((value: any) =>\n              Number(value.totalLiquidityUSD),\n            )}\n            yAxisValues={yAxisValues}\n            dates={globalChartData.map((value: any) => value.date)}\n            width='100%'\n            height={250}\n            categories={getChartDates(globalChartData, durationIndex)}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={223} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsLiquidityChart;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  formatDateFromTimeStamp,\n  getPriceClass,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { BarChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\n\nconst DAY_VOLUME = 0;\nconst WEEK_VOLUME = 1;\n\nconst AnalyticsVolumeChart: React.FC = () => {\n  const { t } = useTranslation();\n  const volumeTypes = [DAY_VOLUME, WEEK_VOLUME];\n  const volumeTypeTexts = [t('dayAbb'), t('weekAbb')];\n  const [volumeIndex, setVolumeIndex] = useState(DAY_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [selectedVolumeIndex, setSelectedVolumeIndex] = useState(-1);\n  const { globalData } = useGlobalData();\n  const [globalChartData, updateGlobalChartData] = useState<any>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData, newWeeklyData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData && newWeeklyData) {\n        const dayItems = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        const weekItems = getLimitedData(\n          newWeeklyData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData({ day: dayItems, week: weekItems });\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityWeeks = useMemo(() => {\n    if (globalChartData) {\n      const dates: string[] = [];\n      globalChartData.week.forEach((value: any, ind: number) => {\n        const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n        const monthLastDate =\n          ind > 0\n            ? formatDateFromTimeStamp(\n                Number(globalChartData.week[ind - 1].date),\n                'MMM',\n              )\n            : '';\n        if (monthLastDate !== month) {\n          dates.push(month);\n        }\n        if (\n          durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ||\n          durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\n        ) {\n          const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n          if (Number(dateStr) % 2 === 0) {\n            //Select dates(one date per 2 weeks) for x axis values of volume chart on week mode\n            dates.push(dateStr);\n          }\n        }\n      });\n      return dates;\n    } else {\n      return [];\n    }\n  }, [globalChartData, durationIndex]);\n\n  const getVolumePercent = (volumeIndex: number) => {\n    if (globalChartData && selectedVolumeIndex > 0) {\n      const volumeDataArr = [globalChartData.day, globalChartData.week];\n      const volumeData = volumeDataArr[volumeIndex];\n      if (!volumeData || volumeData.length <= 1) return 0;\n      const currentVolumeIndex = Math.min(\n        selectedVolumeIndex,\n        volumeData.length - 1,\n      );\n      const currentVolumeData = volumeData[currentVolumeIndex];\n      const prevVolumeData = volumeData[currentVolumeIndex - 1];\n      let currentVolume = 0;\n      let prevVolume = 0;\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          currentVolume = currentVolumeData.weeklyVolumeUSD;\n          prevVolume = prevVolumeData.weeklyVolumeUSD;\n          break;\n        case DAY_VOLUME:\n          currentVolume = currentVolumeData.dailyVolumeUSD;\n          prevVolume = prevVolumeData.dailyVolumeUSD;\n          break;\n      }\n      if (prevVolume <= 0) return 0;\n      return (currentVolume / prevVolume) * 100 - 100;\n    } else if (globalData && selectedVolumeIndex === -1) {\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          return globalData.weeklyVolumeChange;\n        case DAY_VOLUME:\n          return globalData.volumeChangeUSD;\n        default:\n          return 0;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  const volumeDates = useMemo(() => {\n    if (selectedVolumeIndex > -1) {\n      if (volumeIndex === DAY_VOLUME) {\n        return formatDateFromTimeStamp(\n          Number(globalChartData.day[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n      } else {\n        const weekStart = formatDateFromTimeStamp(\n          Number(\n            globalChartData.week[Math.max(0, selectedVolumeIndex - 1)].date,\n          ),\n          'MMM DD, YYYY',\n          selectedVolumeIndex > 0 ? 1 : -6,\n        );\n        const weekEnd = formatDateFromTimeStamp(\n          Number(globalChartData.week[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n        return `${weekStart} - ${weekEnd}`;\n      }\n    }\n    return '';\n  }, [globalChartData, selectedVolumeIndex, volumeIndex]);\n\n  const barChartData = useMemo(() => {\n    if (globalChartData) {\n      return volumeIndex === WEEK_VOLUME\n        ? globalChartData.week.map((value: any) => value.weeklyVolumeUSD)\n        : globalChartData.day.map((value: any) => value.dailyVolumeUSD);\n    } else {\n      return [];\n    }\n  }, [globalChartData, volumeIndex]);\n\n  const volumePercentClass = getPriceClass(\n    Number(getVolumePercent(volumeIndex)),\n  );\n\n  return (\n    <>\n      <Box>\n        <Box className='flex justify-between'>\n          <span className='text-disabled text-bold'>\n            {t('volume')} {selectedVolumeIndex === -1 ? `(${t('24hr')})` : ''}\n          </span>\n          <ChartType\n            chartTypes={volumeTypes}\n            typeTexts={volumeTypeTexts}\n            chartType={volumeIndex}\n            setChartType={setVolumeIndex}\n          />\n        </Box>\n        <Box mt={0.5} className='flex items-start'>\n          {globalChartData && globalData ? (\n            <Box flex={1} mr={2}>\n              <Box className='flex items-center'>\n                <h5>\n                  $\n                  {formatCompact(\n                    selectedVolumeIndex > -1\n                      ? volumeIndex === DAY_VOLUME\n                        ? globalChartData.day[selectedVolumeIndex]\n                            .dailyVolumeUSD\n                        : globalChartData.week[selectedVolumeIndex]\n                            .weeklyVolumeUSD\n                      : volumeIndex === DAY_VOLUME\n                      ? globalData.oneDayVolumeUSD\n                      : globalData.oneWeekVolume,\n                  )}\n                </h5>\n                <Box\n                  ml={1}\n                  height={23}\n                  px={1}\n                  borderRadius={40}\n                  className={volumePercentClass}\n                >\n                  <span>\n                    {`${getVolumePercent(volumeIndex) > 0 ? '+' : ''}\n                      ${getVolumePercent(volumeIndex).toLocaleString()}`}\n                    %\n                  </span>\n                </Box>\n              </Box>\n              <Box height={21}>\n                <span className='text-disabled'>{volumeDates}</span>\n              </Box>\n            </Box>\n          ) : (\n            <Box mr={2} flex={1}>\n              <Skeleton variant='rect' width='100%' height={24} />\n            </Box>\n          )}\n          <ChartType\n            chartTypes={GlobalData.analytics.CHART_DURATIONS}\n            typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n            chartType={durationIndex}\n            setChartType={setDurationIndex}\n          />\n        </Box>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <BarChart\n            height={200}\n            data={barChartData}\n            categories={\n              volumeIndex === WEEK_VOLUME\n                ? liquidityWeeks\n                : getChartDates(globalChartData.day, durationIndex)\n            }\n            onHover={(ind) => setSelectedVolumeIndex(ind)}\n            onMouseLeave={() => {\n              setSelectedVolumeIndex(-1);\n            }}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={250} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsVolumeChart;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { ArrowForwardIos } from '@material-ui/icons';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useEthPrice, useGlobalData } from 'state/application/hooks';\nimport {\n  getTopPairs,\n  getTopTokens,\n  getGlobalData,\n  getBulkPairData,\n} from 'utils';\nimport { GlobalConst } from 'constants/index';\nimport { TokensTable, PairTable } from 'components';\nimport AnalyticsInfo from './AnalyticsInfo';\nimport AnalyticsLiquidityChart from './AnalyticsLiquidityChart';\nimport AnalyticsVolumeChart from './AnalyticsVolumeChart';\nimport { useTranslation } from 'react-i18next';\n\ndayjs.extend(utc);\n\nconst AnalyticsOverview: React.FC = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { globalData, updateGlobalData } = useGlobalData();\n  const [topTokens, updateTopTokens] = useState<any[] | null>(null);\n  const [topPairs, updateTopPairs] = useState<any[] | null>(null);\n  const { ethPrice } = useEthPrice();\n\n  useEffect(() => {\n    if (!ethPrice.price || !ethPrice.oneDayPrice) return;\n    getGlobalData(ethPrice.price, ethPrice.oneDayPrice).then((data) => {\n      if (data) {\n        updateGlobalData({ data });\n      }\n    });\n\n    getTopTokens(\n      ethPrice.price,\n      ethPrice.oneDayPrice,\n      GlobalConst.utils.ANALYTICS_TOKENS_COUNT,\n    ).then((data) => {\n      if (data) {\n        updateTopTokens(data);\n      }\n    });\n\n    getTopPairs(GlobalConst.utils.ANALYTICS_PAIRS_COUNT).then(async (pairs) => {\n      const formattedPairs = pairs\n        ? pairs.map((pair: any) => {\n            return pair.id;\n          })\n        : [];\n      const pairData = await getBulkPairData(formattedPairs, ethPrice.price);\n      if (pairData) {\n        updateTopPairs(pairData);\n      }\n    });\n  }, [updateGlobalData, ethPrice.price, ethPrice.oneDayPrice]);\n\n  return (\n    <Box width='100%' mb={3}>\n      <Grid container spacing={4}>\n        <Grid item xs={12} sm={12} md={6}>\n          <Box className='panel' width={1}>\n            <AnalyticsLiquidityChart />\n          </Box>\n        </Grid>\n        <Grid item xs={12} sm={12} md={6}>\n          <Box className='analyticsVolumeChart panel'>\n            <AnalyticsVolumeChart />\n          </Box>\n        </Grid>\n      </Grid>\n      <Box mt={4}>\n        <Box className='panel flex flex-wrap'>\n          {globalData ? (\n            <AnalyticsInfo data={globalData} />\n          ) : (\n            <Skeleton width='100%' height={20} />\n          )}\n        </Box>\n      </Box>\n      <Box mt={4}>\n        <Box className='flex justify-between items-center'>\n          <Box className='headingWrapper'>\n            <p className='weight-600'>{t('topTokens')}</p>\n          </Box>\n          <Box\n            className='headingWrapper cursor-pointer'\n            onClick={() => history.push(`/analytics/tokens`)}\n          >\n            <p className='weight-600'>{t('seeAll')}</p>\n            <ArrowForwardIos />\n          </Box>\n        </Box>\n      </Box>\n      <Box mt={3} className='panel'>\n        {topTokens ? (\n          <TokensTable data={topTokens} showPagination={false} />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={150} />\n        )}\n      </Box>\n      <Box mt={4}>\n        <Box className='flex items-center justify-between'>\n          <Box className='headingWrapper'>\n            <p className='weight-600'>{t('topPairs')}</p>\n          </Box>\n          <Box\n            className='headingWrapper cursor-pointer'\n            onClick={() => history.push(`/analytics/pairs`)}\n          >\n            <p className='weight-600'>{t('seeAll')}</p>\n            <ArrowForwardIos />\n          </Box>\n        </Box>\n      </Box>\n      <Box mt={3} className='panel'>\n        {topPairs ? (\n          <PairTable data={topPairs} showPagination={false} />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={150} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default AnalyticsOverview;\n"],"sourceRoot":""}