{"version":3,"sources":["assets/images/HelpIcon1.svg","assets/images/SettingsIcon.svg","state/twap/hooks.ts","pages/SwapPage/Twap/LimitPriceInput.tsx","pages/SwapPage/Twap/TimeSelect.tsx","pages/SwapPage/Twap/Duration.tsx","pages/SwapPage/Twap/Interval.tsx","pages/SwapPage/Twap/useValidation.ts","pages/SwapPage/Twap/ChunkSize.tsx","pages/SwapPage/Twap/ErrorNotification.tsx","pages/SwapPage/Twap/useTwapCallback.ts","pages/SwapPage/Twap/ConfirmTwapModal/TxDetails.tsx","pages/SwapPage/Twap/ConfirmTwapModal/Disclaimer.tsx","pages/SwapPage/Twap/PriceIndication.tsx","pages/SwapPage/Twap/ConfirmTwapModal/ModalContent.tsx","pages/SwapPage/Twap/ConfirmTwapModal/ConfirmTwapModal.tsx","pages/SwapPage/Twap/useWrapCallback.ts","pages/SwapPage/Twap/Twap.tsx","pages/SwapPage/SwapMain.tsx","pages/SwapPage/LiquidityPoolRow.tsx","pages/SwapPage/LiquidityPools.tsx","pages/SwapPage/SwapProChart.tsx","pages/SwapPage/SwapProChartTrade.tsx","pages/SwapPage/SwapInfoTx.tsx","pages/SwapPage/SwapProInfo.tsx","pages/SwapPage/SwapProFilter.tsx","pages/SwapPage/SwapPage.tsx"],"names":["_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgHelpIcon1","_ref","svgRef","title","titleId","props","xmlns","width","height","ref","id","d","transform","style","fill","ForwardRef","SvgSettingsIcon","rx","useTwapState","useSelector","state","twap","useTwapActionHandlers","dispatch","useDispatch","currencies","useDerivedTwapInfo","onCurrencySelection","useCallback","field","currency","selectCurrency","currencyId","Token","address","ETHER","onSwitchTokens","switchCurrencies","onUserInput","typedValue","typeInput","inputCurrency","Field","INPUT","onChunkSize","value","setChunkSize","onDuration","setDuration","onInterval","setInterval","onChangeRecipient","recipient","setRecipient","tryParseAmount","typedValueParsed","parseUnits","decimals","toString","TokenAmount","JSBI","BigInt","CurrencyAmount","ether","error","console","debug","inputError","account","useActiveWeb3React","inputCurrencyId","outputCurrencyId","OUTPUT","typedPrice","price","allowLimitPrice","priceAsCurrencyAmount","invertLimitPriceValue","useCurrency","outputCurrency","relevantTokenBalances","useCurrencyBalances","undefined","parsedAmount","v2Trade","currencyAmountIn","currencyOut","allowedPairs","useAllCommonPairs","inputTokenPrice","useUSDCPrice","outputTokenPrice","useMemo","quote","divide","adjusted","useTradeExactIn","currencyBalances","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","handlePriceValue","outputAmount","inputAsCurrencyAmount","typedPriceOutputValue","marketPrice","LimitPriceInput","t","useTranslation","onChange","setPrice","formattedPrice","currenciesMemoized","StyledContainer","className","StyledTop","StyledTitle","toggled","onToggle","setAllowLimitPrice","setInvertLimitPriceValue","invert","toSignificant","InfoTooltip","text","Typography","StyledInputContainer","StyledCurrencyDetails","marginRight","size","disabled","align","placeholder","val","IconButton","onClick","marginLeft","PriceExchangeIcon","styled","Box","display","alignItems","justifyContent","borderBottom","gap","marginTop","flexDirection","TimeSelect","selected","onUpdate","tooltip","margin","StyledRight","displayValue","milliseconds","timeToMilliseconds","type","format","getFormatTypeFromMilliseconds","millisecondsToTime","log","StyledSelect","event","color","opacity","MenuItem","TimeSelectFormat","DAYS","HOURS","MINUTES","Select","theme","palette","primary","main","whiteSpace","Duration","duration","interval","selfEdit","partialFillWarning","totalChunks","Number","usePartialFillWarning","useEffect","StyledCard","setSelfEdit","StyledWarning","fontWeight","ChunkSize","chunkSize","usdPrice","invalidChunkSize","toExact","StyledCurrency","marginBottom","StyledBottom","toLocaleString","ErrorNotification","SwapCallbackState","handleClose","setTimeout","setError","Snackbar","open","autoHideDuration","onClose","Alert","severity","variant","useTwapCallArguments","trade","allowedSlippage","GlobalConst","utils","INITIAL_ALLOWED_SLIPPAGE","recipientAddressOrName","chainId","library","useENS","recipientAddress","deadline","useTransactionDeadline","contract","useRouterContract","tradeVersion","Version","v2","swapMethods","push","Router","swapCallParameters","feeOnTransfer","Percent","BIPS_BASE","ttl","toNumber","DEFAULT_DEADLINE_FROM_NOW","tradeType","TradeType","EXACT_INPUT","map","parameters","calculateInterval","time","moment","days","hours","minutes","str","TxDetails","limitOrderAllowed","StyledDetails","add","fontSize","Row","StyledRow","placement","Disclaimer","link","href","PriceIndication","executionPrice","customText","useState","mainPrice","setMainPrice","ModalContent","onConfirm","outputAsCurrencyAmount","StyledCards","currencyAmount","Button","Card","StyledCardTop","getTokenValue","StyledCardBottom","formatTokenAmount","WrapType","ConfirmTwapModal","originalTrade","onAcceptChanges","onDismiss","swapErrorMessage","isOpen","attemptingTxn","txHash","txPending","modalContent","confirmationContent","message","content","hash","pendingText","NOT_APPLICABLE","wrapType","Twap","currency0","currency1","currencyBgClass","swapInputError","finalizedTransaction","useTransactionFinalizer","wrapLoading","setWrapLoading","allTokens","useAllTokens","wethContract","useWETHContract","balance","useCurrencyBalance","inputAmount","addTransaction","useTransactionAdder","sufficientBalance","WRAP","execute","a","deposit","raw","txReceipt","summary","wait","useTwapWrapCallback","onWrap","wrapInputError","searchToken","useToken","handleCurrencySelect","setApprovalSubmitted","onWrapHandler","showWrap","useUserSlippageTolerance","approving","setApproving","useApproveCallbackFromTrade","approval","approveCallback","inputsError","useInputsValidation","parsedAmounts","formattedAmounts","userHasSpecifiedInputOutput","Boolean","gt","approvalSubmitted","ethereum","window","isValid","showApproveFlow","ApprovalState","NOT_APPROVED","PENDING","APPROVED","toggleWalletModal","useWalletModalToggle","handleOtherCurrencySelect","input","output","swapCalls","INVALID","callback","LOADING","VALID","Promise","all","methodName","args","options","isZero","estimateGas","then","gasEstimate","catch","gasError","callStatic","result","Error","callError","errorMessage","reason","estimatedCalls","successfulEstimation","find","el","ix","list","errorCalls","filter","gasLimit","calculateGasMargin","from","response","inputSymbol","outputSymbol","base","withRecipient","isAddress","shortenAddress","withVersion","toUpperCase","code","useTwapCallback","twapCallback","twapCallbackError","swapButtonText","UNWRAP","isSupportedNetwork","twapButtonDisabled","showConfirm","tradeToConfirm","setTwapState","handleTypeInput","maxAmountInput","maxAmountSpend","handleMaxInput","handleHalfInput","atMaxAmountInput","equalTo","handleAcceptChanges","handleConfirmDismiss","handleTwap","receipt","onHalf","onMax","showHalfButton","showMaxButton","otherCurrency","amount","setAmount","bgClass","ExchangeIcon","showPrice","StyledFlex","Interval","fullWidth","CircularProgress","StyledButtonContainer","addMaticToMetamask","zoom","backgroundImage","SwapMain","swapIndex","setSwapIndex","openSettingsModal","setOpenSettingsModal","useIsProMode","isProMode","updateIsProMode","parsedQuery","useParsedQueryString","my","mr","SettingsIcon","padding","mt","textAlign","Trans","i18nKey","components","bold","alink","rel","LiquidityPoolRow","pair","breakpoints","useTheme","daysCurrentYear","getDaysCurrentYear","isMobile","useMediaQuery","down","dayVolumeUSD","oneDayVolumeUSD","oneDayVolumeUntracked","FEEPERCENT","trackReserveUSD","trackedReserveUSD","reserveUSD","apy","isNaN","liquidity","volume","token0","token1","formatCompact","toFixed","React","memo","LiquidityPools","token2","liquidityPoolClosed","setLiquidityPoolClosed","liquidityFilterIndex","setLiquidityFilterIndex","tokenPairs","updateTokenPairs","token1Address","toLowerCase","token2Address","allTokenList","ethPrice","useEthPrice","liquidityPairs","slice","whiteListAddressList","item","getTokenPairs","formattedPairs","includes","getBulkPairData","pairData","KeyboardArrowDown","KeyboardArrowUp","Divider","ind","SwapProChart","pairAddress","pairName","pairTokenReversed","src","frameBorder","SwapProChartTrade","showChart","showTrades","transactions","TradesTable","data","Table","fixedHeaderContent","itemContent","index","tx","txType","amount0In","txAmount0","amount0Out","txAmount1","amount1In","amount1Out","token1Amount","token2Amount","txPrice","amountUSD","dayjs","unix","transaction","timestamp","formatNumber","getEtherscanLink","shortenTx","orientation","minSize","Height","extend","utc","SwapInfoTx","txFilter","setTxFilter","subtractTimeAmount","split","subtractTimeType","firstTime","subtract","filteredTxs","filteredBuyTxs","filteredSellTxs","reduce","total","items","label","Skeleton","SwapProInfo","token1Data","setToken1Data","token2Data","setToken2Data","unwrappedToken","currency2","oneDayPrice","getTokenInfo","tokenInfo","TokenInfo","tokenData","priceUpPercent","priceChangeUSD","p","ml","flex","priceUSD","py","px","mb","SwapHoriz","SwapProFilter","infoPos","setInfoPos","setShowChart","setShowTrades","infoPosItems","pos","condition","Checkbox","checked","evt","Replay","SwapPage","isTablet","pairId","useDerivedSwapInfo","wrappedCurrency","minHeight","Grid","container","spacing","xs","sm","md","lg","token"],"mappings":"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","file":"static/js/11.fd77220a.chunk.js","sourcesContent":["var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHelpIcon1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 11469\",\n    d: \"M10.78-7.061c0-1.268-.918-1.919-2.319-1.919a3.829 3.829 0 0 0-2.353.78l.167 1.068a3.446 3.446 0 0 1 2.069-.8c.767 0 1.2.334 1.2.918 0 .617-.417.968-1.6 1.4l-.334.117.133 1.518.784-.15.067-.734c1.218-.396 2.186-.997 2.186-2.198zm-2 5.306V-3.09H7.493v1.335zM.352-5.192a7.851 7.851 0 0 0 7.992 8.008 7.855 7.855 0 0 0 8.008-8.008 7.831 7.831 0 0 0-8.008-7.992A7.827 7.827 0 0 0 .352-5.192zm1.1 0a6.789 6.789 0 0 1 6.891-6.941 6.789 6.789 0 0 1 6.891 6.941 6.793 6.793 0 0 1-6.89 6.957 6.793 6.793 0 0 1-6.891-6.957z\",\n    transform: \"translate(-.352 13.184)\",\n    style: {\n      fill: \"#636780\"\n    }\n  }));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHelpIcon1);\nexport default __webpack_public_path__ + \"static/media/HelpIcon1.66c8c791.svg\";\nexport { ForwardRef as ReactComponent };","var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSettingsIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Component 37 \\\\u2013 6\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 40,\n    height: 40,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"rect\", {\n    \"data-name\": \"Rectangle 18293\",\n    width: 40,\n    height: 40,\n    rx: 20,\n    style: {\n      fill: \"none\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Settings 2\",\n    d: \"M20 11.823V8.177c-1.79-.638-2.272-.668-2.522-1.274s.069-.974.882-2.686L15.782 1.64c-1.688.8-2.073 1.137-2.687.883S12.456 1.782 11.823 0H8.177C7.541 1.787 7.511 2.271 6.9 2.522c-.627.261-1-.083-2.686-.883L1.64 4.217c.814 1.713 1.135 2.078.882 2.683S1.788 7.541 0 8.177v3.646c1.783.633 2.271.667 2.523 1.273s-.068.972-.883 2.686l2.577 2.578c1.666-.792 2.058-1.144 2.686-.882.607.252.637.733 1.274 2.522h3.645c.632-1.776.666-2.269 1.281-2.526s.988.083 2.679.885l2.578-2.578c-.812-1.708-1.135-2.077-.882-2.686s.733-.635 2.522-1.272zm-4.062.637a3.3 3.3 0 0 0 .407 2.982l-.9.9a3.288 3.288 0 0 0-2.978-.408 3.309 3.309 0 0 0-1.823 2.4H9.362a3.3 3.3 0 0 0-1.819-2.4 3.307 3.307 0 0 0-2.983.407l-.9-.9a3.3 3.3 0 0 0 .406-2.983 3.307 3.307 0 0 0-2.4-1.818V9.362a3.3 3.3 0 0 0 2.4-1.82 3.3 3.3 0 0 0-.407-2.983l.9-.9a3.3 3.3 0 0 0 2.983.407 3.3 3.3 0 0 0 1.819-2.4h1.279a3.3 3.3 0 0 0 1.82 2.4 3.308 3.308 0 0 0 2.983-.407l.9.9a3.307 3.307 0 0 0-.407 2.983 3.3 3.3 0 0 0 2.4 1.819v1.279a3.3 3.3 0 0 0-2.4 1.819zM10 7.5A2.5 2.5 0 1 1 7.5 10 2.5 2.5 0 0 1 10 7.5zm0-1.667A4.167 4.167 0 1 0 14.167 10 4.166 4.166 0 0 0 10 5.833z\",\n    transform: \"translate(10 10)\",\n    style: {\n      fill: \"#696c80\"\n    }\n  }));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettingsIcon);\nexport default __webpack_public_path__ + \"static/media/SettingsIcon.5b7ed28d.svg\";\nexport { ForwardRef as ReactComponent };","//import useENS from 'hooks/useENS';\nimport { parseUnits } from '@ethersproject/units';\nimport {\n  Currency,\n  CurrencyAmount,\n  ETHER,\n  Fraction,\n  JSBI,\n  Price,\n  Token,\n  TokenAmount,\n  Trade,\n} from '@uniswap/sdk';\nimport { ParsedQs } from 'qs';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport { useAllCommonPairs } from 'hooks/Trades';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { isAddress } from 'utils';\nimport { AppDispatch, AppState } from 'state';\nimport { useCurrencyBalances } from 'state/wallet/hooks';\nimport {\n  Field,\n  replaceTwapState,\n  selectCurrency,\n  setChunkSize,\n  setDuration,\n  setInterval,\n  setRecipient,\n  switchCurrencies,\n  typeInput,\n} from './actions';\nimport { TwapTimeSelect, TwapState, TimeSelectFormat } from './reducer';\nimport { computeSlippageAdjustedAmounts } from 'utils/prices';\nimport { handlePriceValue } from './utils';\nimport useUSDCPrice from 'utils/useUSDCPrice';\n\nexport function useTwapState(): AppState['twap'] {\n  return useSelector<AppState, AppState['twap']>((state) => state.twap);\n}\n\nexport function useTwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void;\n  onSwitchTokens: () => void;\n  onUserInput: (typedValue: string) => void;\n  onChangeRecipient: (recipient: string | null) => void;\n  onChunkSize: (value?: string) => void;\n  onDuration: (value: TwapTimeSelect) => void;\n  onInterval: (value: TwapTimeSelect) => void;\n} {\n  const dispatch = useDispatch<AppDispatch>();\n  const currencies = useDerivedTwapInfo().currencies;\n\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId:\n            currency instanceof Token\n              ? currency.address\n              : currency === ETHER\n              ? 'ETH'\n              : '',\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n\n  const onUserInput = useCallback(\n    (typedValue: string) => {\n      dispatch(\n        typeInput({ inputCurrency: currencies[Field.INPUT], typedValue }),\n      );\n    },\n    [dispatch, currencies],\n  );\n\n  const onChunkSize = useCallback(\n    (value?: string) => {\n      dispatch(setChunkSize(value));\n    },\n    [dispatch],\n  );\n\n  const onDuration = useCallback(\n    (value: TwapTimeSelect) => {\n      dispatch(setDuration(value));\n    },\n    [dispatch],\n  );\n\n  const onInterval = useCallback(\n    (value: TwapTimeSelect) => {\n      dispatch(setInterval(value));\n    },\n    [dispatch],\n  );\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }));\n    },\n    [dispatch],\n  );\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n    onChunkSize,\n    onDuration,\n    onInterval,\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(\n  value?: string,\n  currency?: Currency,\n): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n];\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some(\n      (pair) => pair.liquidityToken.address === checksummedAddress,\n    )\n  );\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedTwapInfo(): {\n  currencies: { [field in Field]?: Currency };\n  currencyBalances: { [field in Field]?: CurrencyAmount };\n  parsedAmount: CurrencyAmount | undefined;\n  inputError?: string;\n  typedPriceOutputValue?: Fraction;\n  marketPrice?: Fraction;\n} {\n  const { account } = useActiveWeb3React();\n\n  const {\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n    typedPrice,\n    price,\n    allowLimitPrice,\n    priceAsCurrencyAmount,\n    invertLimitPriceValue,\n  } = useTwapState();\n\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n\n  //const recipientLookup = useENS(recipient ?? undefined);\n  const to: string | null = (recipient === null ? account : recipient) ?? null;\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ]);\n\n  const parsedAmount = tryParseAmount(typedValue, inputCurrency ?? undefined);\n\n  const bestTradeExactIn = useTradeExactIn(\n    parsedAmount,\n    outputCurrency ?? undefined,\n  );\n\n  const v2Trade = bestTradeExactIn;\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  };\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  };\n\n  let inputError: string | undefined;\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount';\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token';\n  }\n\n  const slippageAdjustedAmounts =\n    v2Trade && computeSlippageAdjustedAmounts(undefined, 0);\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n\n  const { typedPriceOutputValue, marketPrice } = handlePriceValue({\n    price,\n    typedPrice,\n    typedValue,\n    allowLimitPrice,\n    outputAmount: v2Trade,\n    inputAsCurrencyAmount: parsedAmount,\n    priceAsCurrencyAmount,\n    invertLimitPriceValue,\n  });\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n    typedPriceOutputValue,\n    marketPrice,\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n  return 'ETH' ?? '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam))\n    ? urlParam\n    : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output'\n    ? Field.OUTPUT\n    : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): TwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n    price: undefined,\n    typedPrice: false,\n    duration: {\n      type: TimeSelectFormat.MINUTES,\n    },\n    interval: {\n      type: TimeSelectFormat.MINUTES,\n    },\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | {\n      inputCurrencyId: string | undefined;\n      outputCurrencyId: string | undefined;\n    }\n  | undefined {\n  const { chainId } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState<\n    | {\n        inputCurrencyId: string | undefined;\n        outputCurrencyId: string | undefined;\n      }\n    | undefined\n  >();\n\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n\n    dispatch(\n      replaceTwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n        price: undefined,\n      }),\n    );\n\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n\n  return result;\n}\n\nexport function useTradeExactIn(\n  currencyAmountIn?: CurrencyAmount,\n  currencyOut?: Currency,\n): Fraction | undefined {\n  const allowedPairs = useAllCommonPairs(\n    currencyAmountIn?.currency,\n    currencyOut,\n  );\n\n  const inputTokenPrice = useUSDCPrice(currencyAmountIn?.currency);\n  const outputTokenPrice = useUSDCPrice(currencyOut);\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (!inputTokenPrice || !outputTokenPrice) {\n        return;\n      }\n\n      return inputTokenPrice\n        .quote(currencyAmountIn)\n        .divide(outputTokenPrice.adjusted);\n    }\n    return;\n  }, [\n    allowedPairs,\n    currencyAmountIn,\n    currencyOut,\n    inputTokenPrice,\n    outputTokenPrice,\n  ]);\n}\n","import { Box, IconButton, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { Trade } from '@uniswap/sdk';\nimport { CurrencyLogo, NumericalInput, ToggleSwitch } from 'components';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Field,\n  setAllowLimitPrice,\n  setInvertLimitPriceValue,\n  setPrice,\n} from 'state/twap/actions';\nimport {\n  tryParseAmount,\n  useDerivedTwapInfo,\n  useTwapState,\n} from 'state/twap/hooks';\nimport InfoTooltip from './InfoTooltip';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\nimport { useTranslation } from 'react-i18next';\n\nfunction LimitPriceInput() {\n  const { currencies, marketPrice } = useDerivedTwapInfo();\n  const allowLimitPrice = useTwapState().allowLimitPrice;\n  const invertLimitPriceValue = useTwapState().invertLimitPriceValue;\n  const price = useTwapState().price;\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n\n  const onChange = (value: string) => {\n    const currency = currencies[Field.INPUT];\n    if (currency) {\n      dispatch(\n        setPrice({\n          price: value,\n          formattedPrice: value ? tryParseAmount(value, currency) : undefined,\n        }),\n      );\n    }\n  };\n\n  const onToggle = () => {\n    dispatch(setAllowLimitPrice(!allowLimitPrice));\n    if (invertLimitPriceValue) {\n      dispatch(setInvertLimitPriceValue(false));\n      onChange('');\n    } else {\n      onChange(marketPrice?.invert().toSignificant(6) || '');\n    }\n  };\n\n  const toggleInvert = () => {\n    dispatch(setInvertLimitPriceValue(!invertLimitPriceValue));\n  };\n\n  const currenciesMemoized = useMemo(() => {\n    if (!invertLimitPriceValue) {\n      return {\n        inputCurrency: currencies[Field.INPUT],\n        outputCurrency: currencies[Field.OUTPUT],\n      };\n    }\n    return {\n      inputCurrency: currencies[Field.OUTPUT],\n      outputCurrency: currencies[Field.INPUT],\n    };\n  }, [currencies, invertLimitPriceValue]);\n\n  const { inputCurrency, outputCurrency } = currenciesMemoized;\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <StyledTop>\n        <StyledTitle>\n          <ToggleSwitch toggled={!!allowLimitPrice} onToggle={onToggle} />\n          <InfoTooltip\n            text={allowLimitPrice ? t('limitPriceOn') : t('limitPriceOff')}\n          >\n            <Typography>Limit Price</Typography>\n          </InfoTooltip>\n        </StyledTitle>\n        {!allowLimitPrice && <Typography>None</Typography>}\n      </StyledTop>\n      {allowLimitPrice && (\n        <StyledInputContainer>\n          <StyledCurrencyDetails style={{ marginRight: 5 }}>\n            <CurrencyLogo currency={inputCurrency} size={'28px'} />\n            <Typography>1</Typography>\n            <Typography>{inputCurrency?.symbol}</Typography>\n          </StyledCurrencyDetails>{' '}\n          <Typography>=</Typography>\n          <NumericalInput\n            disabled={!allowLimitPrice}\n            value={price || ''}\n            align='center'\n            placeholder={allowLimitPrice ? '0.00' : 'None'}\n            onUserInput={(val) => {\n              onChange(val);\n            }}\n          />\n          <StyledCurrencyDetails>\n            <Typography>{outputCurrency?.symbol}</Typography>\n            <CurrencyLogo currency={outputCurrency} size={'28px'} />\n          </StyledCurrencyDetails>\n          <IconButton onClick={toggleInvert} style={{ marginLeft: 10 }}>\n            <PriceExchangeIcon />\n          </IconButton>\n        </StyledInputContainer>\n      )}\n    </StyledContainer>\n  );\n}\n\nexport default LimitPriceInput;\n\nconst StyledInputContainer = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  marginLeft: 'auto',\n  '& .styledInput': {\n    width: 150,\n    borderBottom: '1px solid white',\n    marginLeft: 10,\n    marginRight: 10,\n  },\n});\n\nconst StyledCurrencyDetails = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 5,\n});\n\nconst StyledContainer = styled(Box)({\n  marginTop: 5,\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 20,\n});\n\nconst StyledTitle = styled(Box)({\n  marginRight: 10,\n  display: 'flex',\n  alignItems: 'center',\n  gap: 15,\n});\n\nconst StyledTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import { Box, MenuItem, Select, Theme, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { NumericalInput } from 'components';\nimport React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { TimeSelectFormat, TwapTimeSelect } from 'state/twap/reducer';\nimport InfoTooltip from './InfoTooltip';\nimport {\n  getFormatTypeFromMilliseconds,\n  millisecondsToTime,\n  timeToMilliseconds,\n} from './utils';\n\ninterface Props {\n  selected: TwapTimeSelect;\n  title: string;\n  disabled?: boolean;\n  tooltip: string | ReactNode;\n\n  onUpdate: ({\n    type,\n    displayValue,\n    milliseconds,\n  }: {\n    type: TimeSelectFormat;\n    displayValue?: string;\n    milliseconds?: number;\n  }) => void;\n}\n\nfunction TimeSelect({ selected, title, onUpdate, disabled, tooltip }: Props) {\n  const onChange = (value: string) => {\n    const milliseconds = timeToMilliseconds(selected.type, value) || 0;\n    let displayValue = value;\n\n    if (!milliseconds) {\n      onUpdate({\n        type: selected.type,\n        displayValue,\n        milliseconds,\n      });\n      return;\n    }\n\n    const format = getFormatTypeFromMilliseconds(milliseconds || 0);\n\n    if (format !== selected.type) {\n      displayValue = millisecondsToTime(format, milliseconds) || '';\n      console.log(displayValue, milliseconds);\n    }\n    onUpdate({\n      type: format,\n      displayValue,\n      milliseconds,\n    });\n  };\n\n  const onSelect = (event: any) => {\n    onUpdate({\n      type: event.target.value,\n    });\n  };\n  return (\n    <>\n      <InfoTooltip text={tooltip}>\n        <StyledTitle style={{ margin: 0 }}>{title}</StyledTitle>\n      </InfoTooltip>\n\n      <StyledRight>\n        <NumericalInput\n          disabled={disabled}\n          value={selected.displayValue || ''}\n          align='right'\n          placeholder='0'\n          onUserInput={(val) => {\n            if (val !== '0' && val !== '.') {\n              onChange(val);\n            }\n          }}\n        />\n        <StyledSelect\n          disabled={disabled}\n          value={selected.type}\n          onChange={onSelect}\n          color='primary'\n          style={{\n            opacity: disabled ? 0.7 : 1,\n          }}\n        >\n          <MenuItem value={TimeSelectFormat.DAYS}>Days</MenuItem>\n          <MenuItem value={TimeSelectFormat.HOURS}>Hours</MenuItem>\n          <MenuItem value={TimeSelectFormat.MINUTES}>Minutes</MenuItem>\n        </StyledSelect>\n      </StyledRight>\n    </>\n  );\n}\n\nexport default TimeSelect;\n\nconst StyledSelect = styled(Select)(({ theme }: { theme: Theme }) => ({\n  color: 'white!important',\n  '&:before': {\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n  },\n  '&:after': {\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n  },\n  '& svg': {\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst StyledRight = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  gap: 20,\n  '& .styledInput': {},\n});\n\nconst StyledTitle = styled(Typography)({\n  marginRight: 10,\n  whiteSpace: 'nowrap',\n});\n","import { Box, styled } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTwapActionHandlers, useTwapState } from 'state/twap/hooks';\nimport TimeSelect from './TimeSelect';\n\nfunction Duration() {\n  const { onDuration } = useTwapActionHandlers();\n  const duration = useTwapState().duration;\n  const { t } = useTranslation();\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <TimeSelect\n        onUpdate={onDuration}\n        selected={duration}\n        title='Duration'\n        tooltip={t('durationInput')}\n      />\n    </StyledContainer>\n  );\n}\n\nexport default Duration;\n\nconst StyledContainer = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import { Box, IconButton, styled, Typography } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { useTwapActionHandlers, useTwapState } from 'state/twap/hooks';\nimport TimeSelect from './TimeSelect';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport { useDispatch } from 'react-redux';\nimport { setSelfEdit } from 'state/twap/actions';\nimport { usePartialFillWarning } from './useValidation';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport { useTranslation } from 'react-i18next';\nimport { getFormatTypeFromMilliseconds, millisecondsToTime } from './utils';\nfunction Duration() {\n  const { onInterval } = useTwapActionHandlers();\n  const interval = useTwapState().interval;\n  const duration = useTwapState().duration;\n\n  const selfEdit = useTwapState().selfEdit;\n  const { t } = useTranslation();\n\n  const partialFillWarning = usePartialFillWarning();\n\n  const dispatch = useDispatch();\n\n  const onEdit = () => {\n    dispatch(setSelfEdit(true));\n  };\n\n  useEffect(() => {\n    if (\n      duration.milliseconds &&\n      interval.milliseconds &&\n      interval.milliseconds > duration.milliseconds\n    ) {\n      const type = getFormatTypeFromMilliseconds(duration.milliseconds);\n      onInterval({\n        milliseconds: duration.milliseconds,\n        type,\n        displayValue: millisecondsToTime(type, duration.milliseconds),\n      });\n    }\n  }, [interval, duration, onInterval]);\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <StyledCard>\n        <TimeSelect\n          tooltip={t('tradeInterval')}\n          disabled={!selfEdit}\n          onUpdate={onInterval}\n          selected={interval}\n          title='Trade Interval'\n        />\n        {!selfEdit && (\n          <IconButton onClick={onEdit}>\n            <EditOutlinedIcon color='primary' />\n          </IconButton>\n        )}\n      </StyledCard>\n      {partialFillWarning && (\n        <StyledWarning>\n          <ErrorOutlineIcon color='error' />\n          <Typography color='error'>Partial fill warning</Typography>\n        </StyledWarning>\n      )}\n    </StyledContainer>\n  );\n}\n\nexport default Duration;\n\nconst StyledCard = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n\nconst StyledContainer = styled(Box)({});\n\nconst StyledWarning = styled(Box)({\n  marginTop: 15,\n  fontWeight: 500,\n  display: 'flex',\n  gap: 10,\n  opacity: 0.7,\n});\n","import React, { useMemo } from 'react';\nimport { useTwapState } from 'state/twap/hooks';\n\nexport const useInputsValidation = (): string | undefined => {\n  const { duration, interval, totalChunks } = useTwapState();\n\n  return useMemo(() => {\n    if (!duration.milliseconds) {\n      return 'Fill duration';\n    }\n    if (!totalChunks) {\n      return 'Missing Trades';\n    }\n    if (!interval.milliseconds) {\n      return 'Fill Interval';\n    }\n\n    return undefined;\n  }, [duration, interval, totalChunks]);\n};\n\nexport const usePartialFillWarning = (): boolean => {\n  const { duration, interval, totalChunks } = useTwapState();\n\n  return useMemo(() => {\n    if (\n      interval.milliseconds &&\n      duration.milliseconds &&\n      totalChunks &&\n      interval.milliseconds * Number(totalChunks) > duration.milliseconds\n    ) {\n      return true;\n    }\n    return false;\n  }, [interval, duration, totalChunks]);\n};\n","import { Avatar, Box, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { Currency } from '@uniswap/sdk';\nimport { CurrencyLogo, NumericalInput } from 'components';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  useDerivedTwapInfo,\n  useTwapActionHandlers,\n  useTwapState,\n} from 'state/twap/hooks';\nimport { invalidChunkSize } from 'state/twap/utils';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport InfoTooltip from './InfoTooltip';\n\ninterface Props {\n  currency: Currency | undefined;\n}\n\nfunction ChunkSize({ currency }: Props) {\n  const { totalChunks, chunkSize } = useTwapState();\n  const { parsedAmount } = useDerivedTwapInfo();\n  const { onChunkSize } = useTwapActionHandlers();\n  const { t } = useTranslation();\n  const usdPrice = Number(useUSDCPrice(currency)?.toSignificant() ?? 0);\n\n  const onChange = (value: string) => {\n    onChunkSize(value);\n  };\n\n  useEffect(() => {\n    if (\n      parsedAmount &&\n      invalidChunkSize(parsedAmount, chunkSize) &&\n      chunkSize !== parsedAmount.toExact()\n    ) {\n      onChunkSize(parsedAmount.toExact());\n    }\n  }, [parsedAmount, chunkSize, onChunkSize]);\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <StyledTop>\n        <InfoTooltip text={t('tradeSizeInput')}>\n          <StyledTitle style={{ margin: 0 }}>Trade Size</StyledTitle>\n        </InfoTooltip>\n        <NumericalInput\n          value={chunkSize || ''}\n          align='right'\n          placeholder='0.00'\n          onUserInput={(val) => {\n            onChange(val);\n          }}\n        />\n        {currency && (\n          <StyledCurrency style={{ marginBottom: 0 }}>\n            <CurrencyLogo currency={currency} size={'24px'} />\n            {currency?.symbol}\n          </StyledCurrency>\n        )}\n      </StyledTop>\n      <StyledBottom>\n        <small className='text-secondary'>\n          Total trades: {totalChunks?.toString() ?? 0}\n        </small>\n        <small className='text-secondary'>\n          ${chunkSize ? (usdPrice * Number(chunkSize)).toLocaleString() : '0'}\n        </small>\n      </StyledBottom>\n    </StyledContainer>\n  );\n}\n\nexport default ChunkSize;\n\nconst StyledTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  width: '100%',\n});\n\nconst StyledBottom = styled(Box)({\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginTop: 10,\n});\n\nconst StyledContainer = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  flexDirection: 'column',\n});\n\nconst StyledTitle = styled(Typography)({\n  marginRight: 10,\n  whiteSpace: 'nowrap',\n});\n\nconst StyledCurrency = styled(Typography)({\n  marginLeft: 20,\n  display: 'flex',\n  gap: 10,\n});\n","import { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useDispatch } from 'react-redux';\nimport { setError } from 'state/twap/actions';\nimport { useTwapState } from 'state/twap/hooks';\nimport React from 'react';\n\nfunction ErrorNotification() {\n  const { error } = useTwapState();\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    setTimeout(() => {\n      dispatch(setError(undefined));\n    }, 400);\n  };\n\n  return (\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity='error' variant='filled'>\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default ErrorNotification;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport {\n  CurrencyAmount,\n  JSBI,\n  Percent,\n  Router,\n  SwapParameters,\n  Trade,\n  TradeType,\n} from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { GlobalConst } from 'constants/index';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport {\n  calculateGasMargin,\n  isZero,\n  isAddress,\n  shortenAddress,\n  formatTokenAmount,\n} from 'utils';\nimport { useActiveWeb3React } from 'hooks';\nimport { useRouterContract } from 'hooks/useContract';\nimport useENS from 'hooks/useENS';\nimport { Version } from 'hooks/useToggledVersion';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract;\n  parameters: SwapParameters;\n}\n\ninterface SuccessfulCall {\n  call: SwapCall;\n  gasEstimate: BigNumber;\n}\n\ninterface FailedCall {\n  call: SwapCall;\n  error: Error;\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall;\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useTwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient =\n    recipientAddressOrName === null ? account : recipientAddress;\n  const deadline = useTransactionDeadline();\n  const contract = useRouterContract();\n\n  return useMemo(() => {\n    const tradeVersion = Version.v2;\n    if (\n      !trade ||\n      !recipient ||\n      !library ||\n      !account ||\n      !tradeVersion ||\n      !chainId\n    )\n      return [];\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(\n              JSBI.BigInt(allowedSlippage),\n              GlobalConst.utils.BIPS_BASE,\n            ),\n            recipient,\n            ttl: deadline\n              ? deadline.toNumber()\n              : GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n          }),\n        );\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(\n                JSBI.BigInt(allowedSlippage),\n                GlobalConst.utils.BIPS_BASE,\n              ),\n              recipient,\n              ttl: deadline\n                ? deadline.toNumber()\n                : GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n            }),\n          );\n        }\n        break;\n    }\n    return swapMethods.map((parameters) => ({ parameters, contract }));\n  }, [\n    account,\n    allowedSlippage,\n    chainId,\n    deadline,\n    library,\n    recipient,\n    trade,\n    contract,\n  ]);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useTwapCallback(\n  { input, output }: { input?: CurrencyAmount; output?: CurrencyAmount }, // trade to execute, required\n  allowedSlippage: number = GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): {\n  state: SwapCallbackState;\n  callback:\n    | null\n    | (() => Promise<{ response: TransactionResponse; summary: string }>);\n  error: string | null;\n} {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const swapCalls = useTwapCallArguments(\n    undefined,\n    allowedSlippage,\n    recipientAddressOrName,\n  );\n\n  const addTransaction = useTransactionAdder();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient =\n    recipientAddressOrName === null ? account : recipientAddress;\n\n  return useMemo(() => {\n    if (!library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies',\n      };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient',\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null,\n        };\n      }\n    }\n\n    const tradeVersion = Version.v2;\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<{\n        response: TransactionResponse;\n        summary: string;\n      }> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call;\n            const options = !value || isZero(value) ? {} : { value };\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate: gasEstimate.add(100000),\n                };\n              })\n              .catch((gasError) => {\n                console.debug(\n                  'Gas estimate failed, trying eth_call to extract error',\n                  call,\n                );\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.debug(\n                      'Unexpected successful call after failed estimate gas',\n                      call,\n                      gasError,\n                      result,\n                    );\n                    return {\n                      call,\n                      error: new Error(\n                        'Unexpected issue with estimating the gas. Please try again.',\n                      ),\n                    };\n                  })\n                  .catch((callError) => {\n                    console.debug('Call threw error', call, callError);\n                    let errorMessage: string;\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                        break;\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n                    }\n                    return { call, error: new Error(errorMessage) };\n                  });\n              });\n          }),\n        );\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el &&\n            (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        );\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(\n            (call): call is FailedCall => 'error' in call,\n          );\n          if (errorCalls.length > 0)\n            throw errorCalls[errorCalls.length - 1].error;\n          throw new Error(\n            'Unexpected error. Please contact support: none of the calls threw an error',\n          );\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation;\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value)\n            ? { value, from: account }\n            : { from: account }),\n        })\n          .then((response: TransactionResponse) => {\n            const inputSymbol = input?.currency.symbol;\n            const outputSymbol = output?.currency.symbol;\n            const inputAmount = formatTokenAmount(input);\n            const outputAmount = formatTokenAmount(output);\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`;\n\n            const withVersion =\n              tradeVersion === Version.v2\n                ? withRecipient\n                : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`;\n\n            addTransaction(response, {\n              summary: withVersion,\n            });\n\n            return { response, summary: withVersion };\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.');\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value);\n              throw new Error(`Swap failed: ${error.message}`);\n            }\n          });\n      },\n      error: null,\n    };\n  }, [\n    library,\n    account,\n    chainId,\n    recipient,\n    recipientAddressOrName,\n    swapCalls,\n    addTransaction,\n    input,\n    output,\n  ]);\n}\n","import { Box, styled, Typography } from '@material-ui/core';\nimport { CurrencyAmount, Fraction } from '@uniswap/sdk';\nimport { CustomTooltip } from 'components';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTwapState } from 'state/twap/hooks';\nimport { formatTokenAmount } from 'utils';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { useTranslation } from 'react-i18next';\nconst calculateInterval = (value?: number) => {\n  if (!value) {\n    return '0';\n  }\n  const time = moment.duration(value);\n  const days = time.days();\n  const hours = time.hours();\n  const minutes = time.minutes();\n\n  let str = '';\n\n  if (days) {\n    str += `${days} Days `;\n  }\n  if (hours) {\n    str += `${hours} Hours `;\n  }\n  if (minutes) {\n    str += `${minutes} Minutes`;\n  }\n  return str;\n};\n\ninterface Props {\n  outputAmount: Fraction;\n  limitOrderAllowed?: boolean;\n}\n\nfunction TxDetails({ outputAmount, limitOrderAllowed }: Props) {\n  const { duration, totalChunks, interval } = useTwapState();\n  const { t } = useTranslation();\n\n  return (\n    <StyledDetails className='swapBox bg-secondary2'>\n      <Row\n        title='Expiration date:'\n        value={moment()\n          .add(duration.milliseconds, 'milliseconds')\n          .format('DD/MM/YYYY HH:mm')}\n        tooltip={t('confirmationModal.expiration')}\n      />\n      <Row\n        title='Minimum Received Per Trade:'\n        value={limitOrderAllowed ? outputAmount.toSignificant(6) : 'None'}\n        tooltip={\n          limitOrderAllowed\n            ? t('minimumReceivedWithLimit')\n            : t('minimumReceivedNoLimit')\n        }\n      />\n\n      <Row\n        title='Total Trades:'\n        value={totalChunks || 0}\n        tooltip={t('totalTrades')}\n      />\n      <Row\n        title='Trade Interval:'\n        value={calculateInterval(interval.milliseconds)}\n        tooltip={t('tradeInterval')}\n      />\n    </StyledDetails>\n  );\n}\n\nexport default TxDetails;\n\nconst StyledDetails = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n  '& p': {\n    display: 'flex',\n    alignItems: 'center',\n    gap: 10,\n    fontSize: 14,\n    '& span': {\n      fontWeight: 600,\n    },\n  },\n});\n\ntype RowProps = {\n  title: string;\n  value: string | number;\n  tooltip?: string;\n};\n\nconst Row = ({ title, value, tooltip }: RowProps) => {\n  return (\n    <StyledRow>\n      {tooltip ? (\n        <CustomTooltip title={tooltip} placement='right'>\n          <Typography>\n            {title} <HelpOutlineIcon style={{ width: 15 }} />\n          </Typography>\n        </CustomTooltip>\n      ) : (\n        <Typography>{title}</Typography>\n      )}\n      <Typography>\n        <span>{value}</span>\n      </Typography>\n    </StyledRow>\n  );\n};\n\nconst StyledRow = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import { Box, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTwapState } from 'state/twap/hooks';\n\nfunction Disclaimer() {\n  const { t } = useTranslation();\n  const allowLimitPrice = useTwapState().allowLimitPrice;\n\n  return (\n    <StyledContainer className='swapBox bg-secondary2'>\n      <Typography>{t('confirmationModal.disclaimer.p1')}</Typography>\n      {allowLimitPrice ? (\n        <Typography>\n          {t('confirmationModal.disclaimer.p2LimitOrderSelected')}\n        </Typography>\n      ) : (\n        <Typography>\n          {t('confirmationModal.disclaimer.p2LimitOrderNotSelected')}\n        </Typography>\n      )}\n      <Typography>{t('confirmationModal.disclaimer.p3')}</Typography>\n      <Typography>{t('confirmationModal.disclaimer.p4')}</Typography>\n      <Typography>{t('confirmationModal.disclaimer.p5')}</Typography>\n      <Typography>\n        {t('confirmationModal.disclaimer.p6', {\n          link: <a href='/test'>test</a>,\n        })}\n      </Typography>\n      <Typography>{t('confirmationModal.disclaimer.p7')}</Typography>\n    </StyledContainer>\n  );\n}\n\nexport default Disclaimer;\n\nconst StyledContainer = styled(Box)({\n  marginTop: 15,\n  '& h2': {\n    fontSize: 20,\n    marginBottom: 20,\n  },\n});\n","import React, { ReactNode, useState } from 'react';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\nimport { Box } from '@material-ui/core';\nimport { Fraction, Price, Trade } from '@uniswap/sdk';\nimport { Field } from 'state/twap/actions';\nimport { useDerivedTwapInfo } from 'state/twap/hooks';\nimport { useTranslation } from 'react-i18next';\nimport InfoTooltip from './InfoTooltip';\n\ninterface Props {\n  executionPrice?: Fraction;\n  title?: string;\n  customText?: string;\n  tooltip?: string | ReactNode;\n}\n\nfunction PriceIndication({\n  executionPrice,\n  title,\n  customText,\n  tooltip,\n}: Props) {\n  const [mainPrice, setMainPrice] = useState(false);\n  const { currencies } = useDerivedTwapInfo();\n\n  return (\n    <Box className='swapPrice'>\n      {tooltip ? (\n        <InfoTooltip text={tooltip}>\n          <small>{title}:</small>\n        </InfoTooltip>\n      ) : (\n        <small>{title}</small>\n      )}\n      {customText ? (\n        <small>{customText}</small>\n      ) : (\n        <>\n          <small>\n            1{' '}\n            {\n              (mainPrice ? currencies[Field.INPUT] : currencies[Field.OUTPUT])\n                ?.symbol\n            }{' '}\n            ={' '}\n            {executionPrice ? (\n              <>\n                {(mainPrice\n                  ? executionPrice.invert()\n                  : executionPrice\n                ).toSignificant(6)}{' '}\n                {\n                  (mainPrice\n                    ? currencies[Field.OUTPUT]\n                    : currencies[Field.INPUT]\n                  )?.symbol\n                }{' '}\n              </>\n            ) : (\n              'Market price '\n            )}\n            <PriceExchangeIcon\n              onClick={() => {\n                setMainPrice(!mainPrice);\n              }}\n            />\n          </small>\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default PriceIndication;\n","import { CurrencyAmount, Trade } from '@uniswap/sdk';\nimport React, { useMemo } from 'react';\nimport { Box, Button, styled, Typography } from '@material-ui/core';\nimport { CurrencyLogo } from 'components';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { formatTokenAmount } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { useDerivedTwapInfo, useTwapState } from 'state/twap/hooks';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport { getTokenValue } from 'state/twap/utils';\nimport TxDetails from './TxDetails';\nimport Disclaimer from './Disclaimer';\nimport InfoTooltip from '../InfoTooltip';\nimport PriceIndication from '../PriceIndication';\nimport { Field } from 'state/twap/actions';\n\ninterface ModalContentProps {\n  onConfirm: () => void;\n}\n\nconst ModalContent: React.FC<ModalContentProps> = ({ onConfirm }) => {\n  const { t } = useTranslation();\n  const {\n    typedPriceOutputValue,\n    parsedAmount,\n    marketPrice,\n    currencies,\n  } = useDerivedTwapInfo();\n  const { allowLimitPrice, priceAsCurrencyAmount } = useTwapState();\n\n  const outputAsCurrencyAmount =\n    typedPriceOutputValue &&\n    tryParseAmount(\n      typedPriceOutputValue.toSignificant(6),\n      currencies[Field.OUTPUT],\n    );\n\n  return (\n    <StyledContainer>\n      <StyledCards>\n        {parsedAmount && <Card currencyAmount={parsedAmount} title='From' />}\n        {outputAsCurrencyAmount && (\n          <Card\n            tooltip={t('confirmationModalToInputTooltip')}\n            currencyAmount={outputAsCurrencyAmount}\n            title='To'\n          />\n        )}\n      </StyledCards>\n      {allowLimitPrice ? (\n        <PriceIndication\n          tooltip={t('confirmationModalLimitOrderTooltip')}\n          executionPrice={priceAsCurrencyAmount}\n          title='Limit Price'\n        />\n      ) : (\n        <PriceIndication\n          tooltip={t('confirmationModalLimitOrderTooltip')}\n          executionPrice={marketPrice}\n          title='Limit Price'\n          customText='None'\n        />\n      )}\n      {typedPriceOutputValue && (\n        <TxDetails\n          outputAmount={typedPriceOutputValue}\n          limitOrderAllowed={allowLimitPrice}\n        />\n      )}\n      <Disclaimer />\n      <Box className='transactionText'>\n        <Button onClick={onConfirm} className='swapButton'>\n          Confirm Order\n        </Button>\n      </Box>\n    </StyledContainer>\n  );\n};\n\nexport default ModalContent;\n\nconst StyledContainer = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n});\n\nconst StyledCards = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n});\n\ntype CardProps = {\n  currencyAmount: CurrencyAmount;\n  title: string;\n  tooltip?: string;\n};\n\nconst Card = ({ currencyAmount, title, tooltip }: CardProps) => {\n  const usdPrice = useUSDCPrice(currencyAmount.currency);\n\n  return (\n    <StyledCard className='swapBox bg-secondary2'>\n      <StyledCardTop>\n        {tooltip ? (\n          <InfoTooltip text={tooltip}>\n            <Typography>{title}</Typography>\n          </InfoTooltip>\n        ) : (\n          <Typography>{title}</Typography>\n        )}\n        <Typography>\n          ~$\n          {usdPrice && getTokenValue(usdPrice, currencyAmount)}\n        </Typography>\n      </StyledCardTop>\n      <StyledCardBottom>\n        <StyledCurrency>\n          <CurrencyLogo currency={currencyAmount.currency} size={'24px'} />\n          <Typography>{currencyAmount.currency?.symbol}</Typography>\n        </StyledCurrency>\n        <Typography>{formatTokenAmount(currencyAmount)}</Typography>\n      </StyledCardBottom>\n    </StyledCard>\n  );\n};\n\nconst StyledCard = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  flexDirection: 'column',\n  gap: 10,\n});\n\nconst StyledCardBottom = styled(Box)({\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  '& p': {\n    fontSize: 18,\n  },\n});\n\nconst StyledCurrency = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 10,\n});\n\nconst StyledCardTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  width: '100%',\n});\n","import { currencyEquals, Trade } from '@uniswap/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  TransactionConfirmationModal,\n  TransactionErrorContent,\n  ConfirmationModalContent,\n} from 'components';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/ConfirmSwapModal.scss';\nimport { useTranslation } from 'react-i18next';\nimport ModalContent from './ModalContent';\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(\n      tradeA.outputAmount.currency,\n      tradeB.outputAmount.currency,\n    ) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  );\n}\n\ninterface ConfirmTwapModalProps {\n  isOpen: boolean;\n  originalTrade: Trade | undefined;\n  attemptingTxn: boolean;\n  txPending?: boolean;\n  txHash: string | undefined;\n  recipient: string | null;\n  allowedSlippage: number;\n  onAcceptChanges: () => void;\n  onConfirm: () => void;\n  swapErrorMessage: string | undefined;\n  onDismiss: () => void;\n}\n\nconst ConfirmTwapModal: React.FC<ConfirmTwapModalProps> = ({\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  txPending,\n}) => {\n  const { t } = useTranslation();\n\n  const modalContent = useCallback(() => {\n    return <ModalContent onConfirm={onConfirm} />;\n  }, [onConfirm]);\n\n  // text to show while loading\n  const pendingText = '';\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <ConfirmationModalContent\n          title={t('confirmTx')}\n          onDismiss={onDismiss}\n          content={modalContent}\n        />\n      ),\n    [t, onDismiss, modalContent, swapErrorMessage],\n  );\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      txPending={txPending}\n      content={confirmationContent}\n      pendingText={pendingText}\n      modalContent={txPending ? t('submittedTxSwap') : t('swapSuccess')}\n    />\n  );\n};\n\nexport default ConfirmTwapModal;\n","import { Currency, ETHER, WETH } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { useCurrencyBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { formatTokenAmount } from 'utils';\nimport { useWETHContract } from 'hooks/useContract';\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE };\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useTwapWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined,\n): {\n  wrapType: WrapType;\n  execute?: undefined | (() => Promise<void>);\n  inputError?: string;\n} {\n  const { chainId, account } = useActiveWeb3React();\n  const wethContract = useWETHContract();\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency);\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [\n    inputCurrency,\n    typedValue,\n  ]);\n  const addTransaction = useTransactionAdder();\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) {\n      return NOT_APPLICABLE;\n    }\n\n    const sufficientBalance =\n      inputAmount && balance && !balance.lessThan(inputAmount);\n\n    if (inputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({\n                    value: `0x${inputAmount.raw.toString(16)}`,\n                  });\n\n                  addTransaction(txReceipt, {\n                    summary: `Wrap ${formatTokenAmount(\n                      inputAmount,\n                    )} MATIC to WMATIC`,\n                  });\n                  await txReceipt.wait();\n                } catch (error) {\n                  console.error('Could not deposit', error);\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient ETH balance',\n      };\n    } else {\n      return NOT_APPLICABLE;\n    }\n  }, [\n    wethContract,\n    chainId,\n    inputCurrency,\n    outputCurrency,\n    inputAmount,\n    balance,\n    addTransaction,\n  ]);\n}\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Currency, CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk';\nimport { Box, Button, CircularProgress, styled } from '@material-ui/core';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport {\n  tryParseAmount,\n  useDerivedTwapInfo,\n  useTwapActionHandlers,\n  useTwapState,\n} from 'state/twap/hooks';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport { Field } from 'state/swap/actions';\nimport { useAllTokens, useToken } from 'hooks/Tokens';\nimport { CurrencyInput } from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport {\n  ApprovalState,\n  useApproveCallbackFromTrade,\n} from 'hooks/useApproveCallback';\nimport { useTransactionFinalizer } from 'state/transactions/hooks';\nimport { addMaticToMetamask, isSupportedNetwork, maxAmountSpend } from 'utils';\nimport { ReactComponent as ExchangeIcon } from 'assets/images/ExchangeIcon.svg';\nimport 'components/styles/Swap.scss';\nimport { useTranslation } from 'react-i18next';\nimport LimitPriceInput from './LimitPriceInput';\nimport Duration from './Duration';\nimport Interval from './Interval';\nimport ChunkSize from './ChunkSize';\nimport ErrorNotification from './ErrorNotification';\nimport { useTwapCallback } from './useTwapCallback';\nimport ConfirmTwapModal from './ConfirmTwapModal';\nimport PriceIndication from './PriceIndication';\nimport { parseUnits } from 'ethers/lib/utils';\nimport useTwapWrapCallback, { WrapType } from './useWrapCallback';\nimport { useInputsValidation } from './useValidation';\n\nconst Twap: React.FC<{\n  currency0?: Currency;\n  currency1?: Currency;\n  currencyBgClass?: string;\n}> = ({ currency0, currency1, currencyBgClass }) => {\n  const { t } = useTranslation();\n  const { account } = useActiveWeb3React();\n  const { typedValue, recipient, allowLimitPrice } = useTwapState();\n  const {\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n    typedPriceOutputValue,\n    marketPrice,\n  } = useDerivedTwapInfo();\n\n  const finalizedTransaction = useTransactionFinalizer();\n  const [wrapLoading, setWrapLoading] = useState(false);\n\n  const allTokens = useAllTokens();\n\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useTwapWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue,\n  );\n\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n  } = useTwapActionHandlers();\n  const searchToken = useToken('0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270');\n\n  const handleCurrencySelect = useCallback(\n    (inputCurrency) => {\n      console.log({ inputCurrency });\n\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection],\n  );\n\n  const onWrapHandler = async () => {\n    if (!onWrap) {\n      return;\n    }\n    try {\n      setWrapLoading(true);\n      await onWrap();\n      handleCurrencySelect(searchToken);\n    } catch (error) {\n    } finally {\n      setWrapLoading(false);\n    }\n  };\n\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE;\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const [approving, setApproving] = useState(false);\n  const [approval, approveCallback] = useApproveCallbackFromTrade();\n\n  const inputsError = useInputsValidation();\n\n  const parsedAmounts = useMemo(() => {\n    return {\n      [Field.INPUT]: parsedAmount,\n      [Field.OUTPUT]: typedPriceOutputValue,\n    };\n  }, [parsedAmount, typedPriceOutputValue]);\n\n  const formattedAmounts = useMemo(() => {\n    return {\n      [Field.INPUT]: typedValue || '',\n      [Field.OUTPUT]: typedPriceOutputValue?.toSignificant(6) || '',\n    };\n  }, [typedValue, typedPriceOutputValue]);\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] &&\n      currencyBalances[Field.INPUT] &&\n      currencyBalances[Field.INPUT]?.toExact() &&\n      typedValue &&\n      parseUnits(typedValue, parsedAmounts[Field.INPUT]?.currency.decimals).gt(\n        parseUnits(\n          currencyBalances[Field.INPUT]?.toExact() || '0',\n          parsedAmounts[Field.INPUT]?.currency.decimals,\n        ),\n      ),\n  );\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n  const { ethereum } = window as any;\n  const isValid = !swapInputError;\n\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED));\n\n  const toggleWalletModal = useWalletModalToggle();\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleOtherCurrencySelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection],\n  );\n\n  const { callback: twapCallback, error: twapCallbackError } = useTwapCallback(\n    {\n      input: parsedAmount,\n      output:\n        typedPriceOutputValue &&\n        tryParseAmount(\n          typedPriceOutputValue.toSignificant(6),\n          currencies[Field.OUTPUT],\n        ),\n    },\n    allowedSlippage,\n    recipient,\n  );\n\n  console.log(inputsError);\n\n  const swapButtonText = useMemo(() => {\n    if (account) {\n      if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n        return t('selectToken');\n      } else if (\n        formattedAmounts[Field.INPUT] === '' &&\n        formattedAmounts[Field.OUTPUT] === ''\n      ) {\n        return t('enterAmount');\n      } else if (showWrap) {\n        return wrapType === WrapType.WRAP\n          ? t('wrap')\n          : wrapType === WrapType.UNWRAP\n          ? t('unWrap')\n          : '';\n      } else if (userHasSpecifiedInputOutput) {\n        return t('insufficientLiquidityTrade');\n      } else if (inputsError) {\n        return inputsError;\n      } else {\n        return swapInputError ?? 'Place order';\n      }\n    } else {\n      return ethereum && !isSupportedNetwork(ethereum)\n        ? t('switchPolygon')\n        : t('connectWallet');\n    }\n  }, [\n    t,\n    formattedAmounts,\n    currencies,\n    account,\n    ethereum,\n    userHasSpecifiedInputOutput,\n    showWrap,\n    wrapType,\n    swapInputError,\n    inputsError,\n  ]);\n\n  const twapButtonDisabled = useMemo(() => {\n    if (account) {\n      if (showWrap) {\n        return Boolean(wrapInputError);\n      } else if (userHasSpecifiedInputOutput) {\n        return true;\n      } else if (showApproveFlow) {\n        return !isValid || approval !== ApprovalState.APPROVED;\n      } else if (inputsError) {\n        return Boolean(inputsError);\n      } else {\n        return !isValid || !!twapCallbackError;\n      }\n    } else {\n      return false;\n    }\n  }, [\n    account,\n    showWrap,\n    wrapInputError,\n    userHasSpecifiedInputOutput,\n    showApproveFlow,\n    approval,\n    isValid,\n    twapCallbackError,\n    inputsError,\n  ]);\n\n  const [\n    {\n      showConfirm,\n      txPending,\n      tradeToConfirm,\n      swapErrorMessage,\n      attemptingTxn,\n      txHash,\n    },\n    setTwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    txPending?: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    txPending: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(value);\n    },\n    [onUserInput],\n  );\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(\n    currencyBalances[Field.INPUT],\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleHalfInput = useCallback(() => {\n    maxAmountInput &&\n      onUserInput((Number(maxAmountInput.toExact()) / 2).toString());\n  }, [maxAmountInput, onUserInput]);\n\n  const atMaxAmountInput = Boolean(\n    maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput),\n  );\n\n  const onSwap = () => {\n    if (showWrap) {\n      onWrapHandler();\n    } else {\n      setTwapState({\n        tradeToConfirm: undefined,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        showConfirm: true,\n        txHash: undefined,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!currencies[Field.INPUT]) {\n      onCurrencySelection(Field.INPUT, Token.ETHER);\n    }\n  }, [onCurrencySelection, allTokens, currencies]);\n\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.INPUT, currency0);\n    }\n    if (currency1) {\n      onCurrencySelection(Field.OUTPUT, currency1);\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n\n  const handleAcceptChanges = useCallback(() => {\n    setTwapState({\n      tradeToConfirm: undefined,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, txHash]);\n\n  const handleConfirmDismiss = useCallback(() => {\n    setTwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput('');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleTwap = useCallback(() => {\n    if (!twapCallback) {\n      return;\n    }\n    setTwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    twapCallback()\n      .then(async ({ response, summary }) => {\n        setTwapState({\n          attemptingTxn: false,\n          txPending: true,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: response.hash,\n        });\n\n        try {\n          const receipt = await response.wait();\n          finalizedTransaction(receipt, {\n            summary,\n          });\n          setTwapState({\n            attemptingTxn: false,\n            txPending: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: undefined,\n            txHash: response.hash,\n          });\n        } catch (error) {\n          setTwapState({\n            attemptingTxn: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: (error as any).message,\n            txHash: undefined,\n          });\n        }\n      })\n      .catch((error) => {\n        setTwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [tradeToConfirm, showConfirm, twapCallback, finalizedTransaction]);\n\n  return (\n    <Box>\n      <ErrorNotification />\n      {showConfirm && (\n        <ConfirmTwapModal\n          isOpen={showConfirm}\n          originalTrade={tradeToConfirm}\n          onAcceptChanges={handleAcceptChanges}\n          attemptingTxn={attemptingTxn}\n          txPending={txPending}\n          txHash={txHash}\n          recipient={recipient}\n          allowedSlippage={allowedSlippage}\n          onConfirm={handleTwap}\n          swapErrorMessage={swapErrorMessage}\n          onDismiss={handleConfirmDismiss}\n        />\n      )}\n      <CurrencyInput\n        title={`${t('from')}:`}\n        id='swap-currency-input'\n        currency={currencies[Field.INPUT]}\n        onHalf={handleHalfInput}\n        onMax={handleMaxInput}\n        showHalfButton={true}\n        showMaxButton={!atMaxAmountInput}\n        otherCurrency={currencies[Field.OUTPUT]}\n        handleCurrencySelect={handleCurrencySelect}\n        amount={formattedAmounts[Field.INPUT]}\n        setAmount={handleTypeInput}\n        bgClass={currencyBgClass}\n      />\n\n      <Box className='exchangeSwap'>\n        <ExchangeIcon onClick={onSwitchTokens} />\n      </Box>\n      <CurrencyInput\n        title={`${t('toEstimate')}:`}\n        id='swap-currency-output'\n        currency={currencies[Field.OUTPUT]}\n        showPrice={Boolean(marketPrice)}\n        showMaxButton={false}\n        otherCurrency={currencies[Field.INPUT]}\n        handleCurrencySelect={handleOtherCurrencySelect}\n        amount={formattedAmounts[Field.OUTPUT] || ''}\n        setAmount={() => null}\n        bgClass={currencyBgClass}\n        disabled\n        tooltip={\n          allowLimitPrice ? t('twapToInputLimitOrder') : t('twapToInput')\n        }\n      />\n      {marketPrice && (\n        <PriceIndication executionPrice={marketPrice} title='Current Price' />\n      )}\n      <StyledFlex>\n        <LimitPriceInput />\n        <Duration />\n        <ChunkSize currency={currencies[Field.INPUT]} />\n        <Interval />\n      </StyledFlex>\n\n      <Box className='swapButtonWrapper'>\n        {showApproveFlow && (\n          <Box width='48%'>\n            <Button\n              fullWidth\n              disabled={\n                approving ||\n                approval !== ApprovalState.NOT_APPROVED ||\n                approvalSubmitted\n              }\n              onClick={async () => {\n                setApproving(true);\n                try {\n                  await approveCallback();\n                  setApproving(false);\n                } catch (err) {\n                  setApproving(false);\n                }\n              }}\n            >\n              {approval === ApprovalState.PENDING ? (\n                <Box className='content'>\n                  {t('approving')} <CircularProgress size={16} />\n                </Box>\n              ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                t('approved')\n              ) : (\n                `${t('approve')} ${currencies[Field.INPUT]?.symbol}`\n              )}\n            </Button>\n          </Box>\n        )}\n        <StyledButtonContainer width={showApproveFlow ? '48%' : '100%'}>\n          <Button\n            fullWidth\n            disabled={(twapButtonDisabled as boolean) || wrapLoading}\n            onClick={account ? onSwap : connectWallet}\n          >\n            {wrapLoading ? (\n              <CircularProgress style={{ color: 'white', zoom: 0.8 }} />\n            ) : (\n              swapButtonText\n            )}\n          </Button>\n        </StyledButtonContainer>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Twap;\n\nconst StyledButtonContainer = styled(Box)({\n  '& .Mui-disabled': {\n    backgroundImage: 'unset!important',\n    color: 'white!important',\n  },\n});\n\nconst StyledFlex = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n});\n","import React, { useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { ReactComponent as SettingsIcon } from 'assets/images/SettingsIcon.svg';\nimport { useIsProMode } from 'state/application/hooks';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { useCurrency } from 'hooks/Tokens';\nimport { Swap, SettingsModal, ToggleSwitch } from 'components';\nimport {\n  GelatoLimitOrderPanel,\n  GelatoLimitOrdersHistoryPanel,\n} from '@gelatonetwork/limit-orders-react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport Twap from './Twap/Twap';\n\nconst SWAP_NORMAL = 0;\nconst SWAP_LIMIT = 1;\nconst TWAP = 2;\n\nconst SwapMain: React.FC = () => {\n  const [swapIndex, setSwapIndex] = useState(TWAP);\n  const [openSettingsModal, setOpenSettingsModal] = useState(false);\n  const { isProMode, updateIsProMode } = useIsProMode();\n\n  const parsedQuery = useParsedQueryString();\n  const currency0 = useCurrency(\n    parsedQuery && parsedQuery.currency0\n      ? (parsedQuery.currency0 as string)\n      : undefined,\n  );\n  const currency1 = useCurrency(\n    parsedQuery && parsedQuery.currency1\n      ? (parsedQuery.currency1 as string)\n      : undefined,\n  );\n  const { t } = useTranslation();\n\n  console.log(t('market'));\n\n  return (\n    <>\n      {openSettingsModal && (\n        <SettingsModal\n          open={openSettingsModal}\n          onClose={() => setOpenSettingsModal(false)}\n        />\n      )}\n      <Box\n        className={`flex flex-wrap items-center justify-between ${\n          isProMode ? ' proModeWrapper' : ''\n        }`}\n      >\n        <Box display='flex'>\n          <Box\n            className={`${\n              swapIndex === SWAP_NORMAL ? 'activeSwap' : ''\n            } swapItem headingItem\n            `}\n            onClick={() => setSwapIndex(SWAP_NORMAL)}\n          >\n            <p>{t('market')}</p>\n          </Box>\n          <Box\n            className={`${\n              swapIndex === SWAP_LIMIT ? 'activeSwap' : ''\n            } swapItem headingItem ${isProMode ? 'border-right' : ''}`}\n            onClick={() => setSwapIndex(SWAP_LIMIT)}\n          >\n            <p>{t('limit')}</p>\n          </Box>\n          <Box\n            className={`${\n              swapIndex === TWAP ? 'activeSwap' : ''\n            } swapItem headingItem ${isProMode ? 'border-right' : ''}`}\n            onClick={() => setSwapIndex(TWAP)}\n          >\n            <p>{t('twap')}</p>\n          </Box>\n        </Box>\n        <Box my={1} className='flex items-center'>\n          {!isProMode && (\n            <Box className='flex items-center' mr={1}>\n              <span\n                className='text-secondary text-uppercase'\n                style={{ marginRight: 8 }}\n              >\n                {t('proMode')}\n              </span>\n              <ToggleSwitch\n                toggled={isProMode}\n                onToggle={() => updateIsProMode(!isProMode)}\n              />\n            </Box>\n          )}\n          <Box className='headingItem' marginRight={isProMode ? 2.5 : 0}>\n            <SettingsIcon onClick={() => setOpenSettingsModal(true)} />\n          </Box>\n        </Box>\n      </Box>\n      <Box padding={isProMode ? '0 24px' : '0'} mt={3.5}>\n        {swapIndex === SWAP_NORMAL && (\n          <Swap\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n          />\n        )}\n        {swapIndex === SWAP_LIMIT && (\n          <Box className='limitOrderPanel'>\n            <GelatoLimitOrderPanel />\n            <GelatoLimitOrdersHistoryPanel />\n            <Box mt={2} textAlign='center'>\n              <small>\n                <Trans\n                  i18nKey='limitOrderDisclaimer'\n                  components={{\n                    bold: <b />,\n                    alink: (\n                      <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://www.certik.org/projects/gelato'\n                      />\n                    ),\n                  }}\n                />\n              </small>\n            </Box>\n          </Box>\n        )}\n        {swapIndex === TWAP && (\n          <Twap\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default SwapMain;\n","import React from 'react';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { GlobalConst } from 'constants/index';\nimport { DoubleCurrencyLogo } from 'components';\nimport { formatCompact, getDaysCurrentYear } from 'utils';\nimport { useCurrency } from 'hooks/Tokens';\nimport { useTranslation } from 'react-i18next';\n\nconst LiquidityPoolRow: React.FC<{\n  pair: any;\n  key: number;\n}> = ({ pair, key }) => {\n  const { breakpoints } = useTheme();\n  const daysCurrentYear = getDaysCurrentYear();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const { t } = useTranslation();\n\n  const dayVolumeUSD =\n    Number(\n      pair.oneDayVolumeUSD ? pair.oneDayVolumeUSD : pair.oneDayVolumeUntracked,\n    ) *\n    GlobalConst.utils.FEEPERCENT *\n    daysCurrentYear *\n    100;\n  const trackReserveUSD = Number(\n    pair.oneDayVolumeUSD ? pair.trackedReserveUSD : pair.reserveUSD,\n  );\n  const apy =\n    isNaN(dayVolumeUSD) || trackReserveUSD === 0\n      ? 0\n      : dayVolumeUSD / trackReserveUSD;\n  const liquidity = pair.trackedReserveUSD\n    ? pair.trackedReserveUSD\n    : pair.reserveUSD;\n  const volume = pair.oneDayVolumeUSD\n    ? pair.oneDayVolumeUSD\n    : pair.oneDayVolumeUntracked;\n  const token0 = useCurrency(pair.token0.id);\n  const token1 = useCurrency(pair.token1.id);\n  return (\n    <Box key={key} className='liquidityContent'>\n      <Box className='flex items-center' width={isMobile ? 1 : 0.5}>\n        <DoubleCurrencyLogo\n          currency0={token0 ?? undefined}\n          currency1={token1 ?? undefined}\n          size={28}\n        />\n        <small style={{ marginLeft: 12 }}>\n          {pair.token0.symbol.toUpperCase()} /{' '}\n          {pair.token1.symbol.toUpperCase()}\n        </small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.2}\n        mt={isMobile ? 2.5 : 0}\n        className='flex justify-between'\n      >\n        {isMobile && <small className='text-secondary'>{t('tvl')}</small>}\n        <small>${formatCompact(liquidity)}</small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.15}\n        mt={isMobile ? 1 : 0}\n        className='flex justify-between'\n      >\n        {isMobile && <small className='text-secondary'>{t('24hVol')}</small>}\n        <small>${formatCompact(volume)}</small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.15}\n        mt={isMobile ? 1 : 0}\n        className={`flex ${isMobile ? 'justify-between' : 'justify-end'}`}\n      >\n        {isMobile && <small className='text-secondary'>{t('apy')}</small>}\n        <small\n          className={`text-right ${apy < 0 ? 'text-error' : 'text-success'}`}\n        >\n          {apy.toFixed(2)}%\n        </small>\n      </Box>\n    </Box>\n  );\n};\n\nexport default React.memo(LiquidityPoolRow);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Box, Divider, useMediaQuery } from '@material-ui/core';\nimport { KeyboardArrowUp, KeyboardArrowDown } from '@material-ui/icons';\nimport { useTheme } from '@material-ui/core/styles';\nimport { getTokenPairs, getBulkPairData } from 'utils';\nimport { Token } from '@uniswap/sdk';\nimport LiquidityPoolRow from './LiquidityPoolRow';\nimport { useAllTokens } from 'hooks/Tokens';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\nconst LiquidityPools: React.FC<{\n  token1: Token;\n  token2: Token;\n}> = ({ token1, token2 }) => {\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const [liquidityPoolClosed, setLiquidityPoolClosed] = useState(false);\n  const [liquidityFilterIndex, setLiquidityFilterIndex] = useState(0);\n  const [tokenPairs, updateTokenPairs] = useState<any[] | null>(null);\n  const token1Address = token1.address.toLowerCase();\n  const token2Address = token2.address.toLowerCase();\n  const allTokenList = useAllTokens();\n  const { t } = useTranslation();\n  const { ethPrice } = useEthPrice();\n\n  const liquidityPairs = useMemo(\n    () =>\n      tokenPairs\n        ? tokenPairs\n            .filter((pair: any) => {\n              if (liquidityFilterIndex === 0) {\n                return true;\n              } else if (liquidityFilterIndex === 1) {\n                return (\n                  pair.token0.id === token1Address ||\n                  pair.token1.id === token1Address\n                );\n              } else {\n                return (\n                  pair.token0.id === token2Address ||\n                  pair.token1.id === token2Address\n                );\n              }\n            })\n            .slice(0, 5)\n        : [],\n    [tokenPairs, liquidityFilterIndex, token1Address, token2Address],\n  );\n\n  const whiteListAddressList = useMemo(\n    () => Object.keys(allTokenList).map((item) => item.toLowerCase()),\n    [allTokenList],\n  );\n\n  useEffect(() => {\n    if (!ethPrice.price) return;\n    (async () => {\n      const tokenPairs = await getTokenPairs(token1Address, token2Address);\n\n      const formattedPairs = tokenPairs\n        ? tokenPairs\n            .filter((pair: any) => {\n              return (\n                whiteListAddressList.includes(pair?.token0?.id) &&\n                whiteListAddressList.includes(pair?.token1?.id)\n              );\n            })\n            .map((pair: any) => {\n              return pair.id;\n            })\n        : [];\n\n      const pairData = await getBulkPairData(formattedPairs, ethPrice.price);\n\n      if (pairData) {\n        updateTokenPairs(pairData);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token1Address, token2Address, whiteListAddressList, ethPrice.price]);\n\n  return (\n    <>\n      <Box\n        className='flex items-center justify-between'\n        marginBottom={liquidityPoolClosed ? 0 : '20px'}\n      >\n        <Box className='flex items-center'>\n          <p className='weight-600' style={{ marginRight: 8 }}>\n            {t('liquidityPools')}\n          </p>\n          <small className='text-secondary'>\n            ({token1.symbol?.toUpperCase()}, {token2.symbol?.toUpperCase()})\n          </small>\n        </Box>\n        <Box\n          className='flex cursor-pointer text-secondary'\n          onClick={() => setLiquidityPoolClosed(!liquidityPoolClosed)}\n        >\n          {liquidityPoolClosed ? <KeyboardArrowDown /> : <KeyboardArrowUp />}\n        </Box>\n      </Box>\n      {!liquidityPoolClosed && (\n        <>\n          <Divider />\n          <Box width={1}>\n            <Box padding={2} className='flex liquidityMain'>\n              <Box width={0.5} className='flex liquidityFilter'>\n                <small\n                  className={liquidityFilterIndex === 0 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(0)}\n                >\n                  {t('all')}\n                </small>\n                <small\n                  className={liquidityFilterIndex === 1 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(1)}\n                >\n                  {token1.symbol?.toUpperCase()}\n                </small>\n                <small\n                  className={liquidityFilterIndex === 2 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(2)}\n                >\n                  {token2.symbol?.toUpperCase()}\n                </small>\n              </Box>\n              {!isMobile && (\n                <>\n                  <Box width={0.2}>\n                    <small>{t('tvl')}</small>\n                  </Box>\n                  <Box width={0.15}>\n                    <small>{t('24hVol')}</small>\n                  </Box>\n                  <Box width={0.15} className='text-right'>\n                    <small>{t('apy')}</small>\n                  </Box>\n                </>\n              )}\n            </Box>\n            {liquidityPairs.map((pair: any, ind: any) => (\n              <LiquidityPoolRow pair={pair} key={ind} />\n            ))}\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LiquidityPools;\n","import React from 'react';\n\nconst SwapProChart: React.FC<{\n  pairName: string;\n  pairAddress: string;\n  pairTokenReversed: boolean;\n}> = ({ pairAddress, pairName, pairTokenReversed }) => {\n  return (\n    <iframe\n      src={`https://mode.quickswap.exchange?pairAddress=${pairAddress}&pairName=${pairName}&tokenReversed=${pairTokenReversed}`}\n      height='100%'\n      width='100%'\n      frameBorder='0'\n    />\n  );\n};\n\nexport default React.memo(SwapProChart);\n","import React from 'react';\nimport SwapProChart from './SwapProChart';\nimport { Token } from '@uniswap/sdk';\nimport { Box } from '@material-ui/core';\nimport { Height } from '@material-ui/icons';\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex';\nimport 'react-reflex/styles.css';\nimport { formatNumber, shortenTx, getEtherscanLink } from 'utils';\nimport dayjs from 'dayjs';\nimport { useActiveWeb3React } from 'hooks';\nimport { TableVirtuoso } from 'react-virtuoso';\nimport { useTranslation } from 'react-i18next';\n\nconst SwapProChartTrade: React.FC<{\n  showChart: boolean;\n  showTrades: boolean;\n  token1: Token;\n  token2: Token;\n  pairAddress: string;\n  pairTokenReversed: boolean;\n  transactions?: any[];\n}> = ({\n  showChart,\n  showTrades,\n  token1,\n  token2,\n  pairAddress,\n  pairTokenReversed,\n  transactions,\n}) => {\n  const { chainId } = useActiveWeb3React();\n  const { t } = useTranslation();\n\n  const TradesTable = () => (\n    <TableVirtuoso\n      data={transactions}\n      components={{\n        Table: ({ ...props }) => <table className='tradeTable' {...props} />,\n      }}\n      fixedHeaderContent={() => (\n        <tr>\n          <th align='left'>{t('date')}</th>\n          <th align='left'>{t('type')}</th>\n          <th align='right'>{t('usd')}</th>\n          <th align='right'>{token1.symbol}</th>\n          <th align='right'>{token2.symbol}</th>\n          <th align='right'>{t('price')}</th>\n          <th align='right'>{t('txn')}</th>\n        </tr>\n      )}\n      itemContent={(index, tx) => {\n        const txType = Number(tx.amount0In) > 0 ? 'sell' : 'buy';\n        const txAmount0 =\n          Number(tx.amount0In) > 0 ? tx.amount0In : tx.amount0Out;\n        const txAmount1 =\n          Number(tx.amount1In) > 0 ? tx.amount1In : tx.amount1Out;\n        const token1Amount =\n          tx.pair.token0.id.toLowerCase() === token1.address.toLowerCase()\n            ? txAmount0\n            : txAmount1;\n        const token2Amount =\n          tx.pair.token0.id.toLowerCase() === token1.address.toLowerCase()\n            ? txAmount1\n            : txAmount0;\n        const txPrice = Number(tx.amountUSD) / token1Amount;\n        return (\n          <>\n            <td align='left'>\n              {dayjs\n                .unix(tx.transaction.timestamp)\n                .format('MMM DD, hh:mm:ss a')}\n            </td>\n            <td className={txType} align='left'>\n              {txType.toUpperCase()}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(tx.amountUSD)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(token1Amount)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(token2Amount)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(txPrice)}\n            </td>\n            <td className={txType} align='right'>\n              {chainId ? (\n                <a\n                  href={getEtherscanLink(\n                    chainId,\n                    tx.transaction.id,\n                    'transaction',\n                  )}\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  {shortenTx(tx.transaction.id)}\n                </a>\n              ) : (\n                shortenTx(tx.transaction.id)\n              )}\n            </td>\n          </>\n        );\n      }}\n    />\n  );\n\n  return (\n    <ReflexContainer orientation='horizontal'>\n      {showChart && (\n        <ReflexElement className='top-pane' minSize={200}>\n          <SwapProChart\n            pairName={`${token1.symbol}/${token2.symbol}`}\n            pairAddress={pairAddress}\n            pairTokenReversed={pairTokenReversed}\n          />\n        </ReflexElement>\n      )}\n      {showChart && showTrades && (\n        <ReflexSplitter>\n          <Box\n            width={1}\n            height='2px'\n            className='flex justify-center items-center'\n          >\n            <Height />\n          </Box>\n        </ReflexSplitter>\n      )}\n      {showTrades && (\n        <ReflexElement className='bottom-pane' minSize={200}>\n          <TradesTable />\n        </ReflexElement>\n      )}\n    </ReflexContainer>\n  );\n};\n\nexport default React.memo(SwapProChartTrade);\n","import React, { useState } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { ButtonSwitch } from 'components';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { formatCompact, formatNumber } from 'utils';\nimport { useTranslation } from 'react-i18next';\ndayjs.extend(utc);\n\nconst SwapInfoTx: React.FC<{\n  transactions?: any[];\n}> = ({ transactions }) => {\n  const [txFilter, setTxFilter] = useState('5_minute');\n  const subtractTimeAmount = Number(txFilter.split('_')[0]);\n  const subtractTimeType = txFilter.split('_')[1];\n  const currentTime = dayjs.utc();\n  const firstTime = currentTime\n    .subtract(subtractTimeAmount, subtractTimeType)\n    .unix();\n\n  const filteredTxs = transactions?.filter(\n    (tx) => tx.transaction.timestamp >= firstTime,\n  );\n  const filteredBuyTxs = filteredTxs?.filter((tx) => Number(tx.amount1In) > 0);\n  const filteredSellTxs = filteredTxs?.filter((tx) => Number(tx.amount0In) > 0);\n  const volume = filteredTxs\n    ? filteredTxs.reduce((total, tx) => total + Number(tx.amountUSD), 0)\n    : undefined;\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <ButtonSwitch\n        height={32}\n        value={txFilter}\n        onChange={setTxFilter}\n        items={[\n          { label: `5${t('min')}`, value: '5_minute' },\n          { label: `1${t('hour')}`, value: '1_hour' },\n          { label: `6${t('hour')}`, value: '6_hour' },\n          { label: `24${t('hour')}`, value: '24_hour' },\n        ]}\n      />\n      <Box className='swapTxInfo'>\n        <Box>\n          <small className='text-secondary'>{t('transactions')}:</small>\n          {filteredTxs ? (\n            <small>{filteredTxs.length}</small>\n          ) : (\n            <Skeleton width={60} height={14} />\n          )}\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('buys')}:</small>\n          <small>\n            {filteredBuyTxs ? (\n              filteredBuyTxs.length\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('sells')}:</small>\n          <small>\n            {filteredSellTxs ? (\n              filteredSellTxs.length\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('volume')}:</small>\n          <small>\n            {filteredTxs ? (\n              volume > 1000 ? (\n                formatCompact(volume)\n              ) : (\n                formatNumber(volume)\n              )\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default React.memo(SwapInfoTx);\n","import React, { useState, useEffect } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { SwapHoriz } from '@material-ui/icons';\nimport { Currency, Token } from '@uniswap/sdk';\nimport { CurrencyLogo } from 'components';\nimport { getTokenInfo, formatNumber } from 'utils';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SwapInfoTx from './SwapInfoTx';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\nconst SwapProInfo: React.FC<{\n  token1?: Token;\n  token2?: Token;\n  transactions?: any[];\n}> = ({ token1, token2, transactions }) => {\n  const { t } = useTranslation();\n  const [token1Data, setToken1Data] = useState<any>(null);\n  const [token2Data, setToken2Data] = useState<any>(null);\n  const token1Address = token1?.address;\n  const token2Address = token2?.address;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n  const currency2 = token2 ? unwrappedToken(token2) : undefined;\n  const { ethPrice } = useEthPrice();\n\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        if (token1Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token1Address,\n          );\n          if (tokenInfo) {\n            setToken1Data(tokenInfo[0]);\n          }\n        }\n        if (token2Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token2Address,\n          );\n          if (tokenInfo) {\n            setToken2Data(tokenInfo[0]);\n          }\n        }\n      }\n    })();\n  }, [token1Address, token2Address, ethPrice.price, ethPrice.oneDayPrice]);\n\n  const TokenInfo: React.FC<{ currency: Currency; tokenData: any }> = ({\n    currency,\n    tokenData,\n  }) => {\n    const priceUpPercent = Number(tokenData?.priceChangeUSD);\n    return (\n      <>\n        <Box p={1} display='flex'>\n          <CurrencyLogo currency={currency} />\n          <Box ml={1} flex={1}>\n            <Box className='flex justify-between'>\n              <small>{currency.symbol}</small>\n              {tokenData ? (\n                <small>${formatNumber(tokenData?.priceUSD)}</small>\n              ) : (\n                <Skeleton width={60} height={14} />\n              )}\n            </Box>\n            {tokenData ? (\n              <span>\n                {t('24h')}:{' '}\n                <span\n                  className={priceUpPercent > 0 ? 'text-success' : 'text-error'}\n                >\n                  {formatNumber(priceUpPercent)}%\n                </span>\n              </span>\n            ) : (\n              <Skeleton width={60} height={12} />\n            )}\n          </Box>\n        </Box>\n        <Divider />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Box p={1}>\n        <p className='text-uppercase'>{t('info')}:</p>\n      </Box>\n      <Divider />\n      {currency1 && <TokenInfo currency={currency1} tokenData={token1Data} />}\n      {currency2 && <TokenInfo currency={currency2} tokenData={token2Data} />}\n      {currency1 && currency2 && (\n        <>\n          <Box py={2} px={1}>\n            <Box mb={1} px={1} className='flex items-center justify-between'>\n              <small>\n                {currency1.symbol} / {currency2.symbol}\n              </small>\n              <Box className='swapIcon'>\n                <SwapHoriz />\n              </Box>\n            </Box>\n            <SwapInfoTx transactions={transactions} />\n          </Box>\n          <Divider />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(SwapProInfo);\n","import React from 'react';\nimport { Box, Checkbox } from '@material-ui/core';\nimport { Replay } from '@material-ui/icons';\nimport { CustomSwitch } from 'components';\nimport { useTranslation } from 'react-i18next';\n\ninterface SwapProFilterProps {\n  infoPos: string;\n  setInfoPos: (pos: string) => void;\n  showChart: boolean;\n  setShowChart: (value: boolean) => void;\n  showTrades: boolean;\n  setShowTrades: (value: boolean) => void;\n}\n\nconst SwapProFilter: React.FC<SwapProFilterProps> = ({\n  infoPos,\n  setInfoPos,\n  showChart,\n  setShowChart,\n  showTrades,\n  setShowTrades,\n}) => {\n  const { t } = useTranslation();\n  const swapPositions = [t('left'), t('right'), t('none')];\n\n  const infoPosItems = swapPositions.map((pos) => {\n    return {\n      text: pos,\n      onClick: () => setInfoPos(pos),\n      condition: infoPos === pos,\n    };\n  });\n\n  return (\n    <Box className='swapFilter'>\n      <Box className='checkWrapper'>\n        <Checkbox\n          checked={showChart}\n          disabled={!showTrades}\n          onChange={(evt) => setShowChart(evt.target.checked)}\n        />\n        <small>{t('chart')}</small>\n      </Box>\n      <Box className='checkWrapper'>\n        <Checkbox\n          checked={showTrades}\n          disabled={!showChart}\n          onChange={(evt) => setShowTrades(evt.target.checked)}\n        />\n        <small>{t('trades')}</small>\n      </Box>\n      <Box className='flex items-center'>\n        <small className='text-uppercase'>{t('info')}:</small>\n        <Box ml={1}>\n          <CustomSwitch width={190} height={30} items={infoPosItems} />\n        </Box>\n      </Box>\n      <Box\n        className='replayButton'\n        onClick={() => {\n          setInfoPos(t('right'));\n          setShowChart(true);\n          setShowTrades(true);\n        }}\n      >\n        <Replay />\n      </Box>\n    </Box>\n  );\n};\n\nexport default SwapProFilter;\n","import React, { useState, useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Box, Grid, useMediaQuery } from '@material-ui/core';\nimport { ReactComponent as HelpIcon } from 'assets/images/HelpIcon1.svg';\nimport { SwapTokenDetails, ToggleSwitch } from 'components';\nimport { useIsProMode } from 'state/application/hooks';\nimport { useDerivedSwapInfo } from 'state/swap/hooks';\nimport { Field } from 'state/swap/actions';\nimport { getPairAddress, getSwapTransactions } from 'utils';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { useActiveWeb3React } from 'hooks';\nimport SwapMain from './SwapMain';\nimport LiquidityPools from './LiquidityPools';\nimport SwapProChartTrade from './SwapProChartTrade';\nimport SwapProInfo from './SwapProInfo';\nimport SwapProFilter from './SwapProFilter';\nimport { useTranslation } from 'react-i18next';\nimport 'pages/styles/swap.scss';\n\nconst SwapPage: React.FC = () => {\n  const { isProMode, updateIsProMode } = useIsProMode();\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('sm'));\n  const isTablet = useMediaQuery(breakpoints.down('md'));\n  const [showChart, setShowChart] = useState(true);\n  const [showTrades, setShowTrades] = useState(true);\n  const [pairId, setPairId] = useState<string | undefined>(undefined);\n  const [pairTokenReversed, setPairTokenReversed] = useState(false);\n  const [transactions, setTransactions] = useState<any[] | undefined>(\n    undefined,\n  );\n  const [infoPos, setInfoPos] = useState('right');\n\n  const { currencies } = useDerivedSwapInfo();\n  const { chainId } = useActiveWeb3React();\n\n  const token1 = wrappedCurrency(currencies[Field.INPUT], chainId);\n  const token2 = wrappedCurrency(currencies[Field.OUTPUT], chainId);\n\n  const { t } = useTranslation();\n\n  return (\n    <Box width='100%' mb={3} id='swap-page'>\n      {!isProMode && (\n        <Box className='pageHeading'>\n          <h4>{t('swap')}</h4>\n          <Box className='helpWrapper'>\n            <small>{t('help')}</small>\n            <HelpIcon />\n          </Box>\n        </Box>\n      )}\n      {!isProMode ? (\n        <Grid container spacing={4}>\n          <Grid item xs={12} sm={12} md={6} lg={5}>\n            <Box className='wrapper'>\n              <SwapMain />\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={12} md={6} lg={7}>\n            <Box className='flex flex-wrap justify-between fullWidth'>\n              {token1 && (\n                <Box className='swapTokenDetails'>\n                  <SwapTokenDetails token={token1} />\n                </Box>\n              )}\n              {token2 && (\n                <Box className='swapTokenDetails'>\n                  <SwapTokenDetails token={token2} />\n                </Box>\n              )}\n            </Box>\n            {token1 && token2 && (\n              <Box className='wrapper' marginTop='32px'>\n                <LiquidityPools token1={token1} token2={token2} />\n              </Box>\n            )}\n          </Grid>\n        </Grid>\n      ) : (\n        <Box\n          className='border-top border-bottom bg-palette flex flex-wrap'\n          minHeight='calc(100vh - 140px)'\n        >\n          <Box\n            width={isMobile ? 1 : '450px'}\n            padding='20px 0'\n            className={isMobile ? '' : 'border-right'}\n          >\n            <Box\n              className='flex justify-between items-center'\n              padding='0 24px'\n              mb={3}\n            >\n              <h4>{t('swap')}</h4>\n              <Box className='flex items-center' mr={1}>\n                <span\n                  className='text-secondary text-uppercase'\n                  style={{ marginRight: 8 }}\n                >\n                  {t('proMode')}\n                </span>\n                <ToggleSwitch\n                  toggled={isProMode}\n                  onToggle={() => updateIsProMode(!isProMode)}\n                />\n              </Box>\n            </Box>\n            <SwapMain />\n          </Box>\n          {infoPos === 'left' && (\n            <Box\n              className={isMobile ? 'border-top' : 'border-left border-right'}\n              width={isMobile ? 1 : 250}\n            >\n              <SwapProInfo\n                token1={token1}\n                token2={token2}\n                transactions={transactions}\n              />\n            </Box>\n          )}\n          <Box className='swapProWrapper'>\n            <SwapProFilter\n              infoPos={infoPos}\n              setInfoPos={setInfoPos}\n              showChart={showChart}\n              setShowChart={setShowChart}\n              showTrades={showTrades}\n              setShowTrades={setShowTrades}\n            />\n            {token1 && token2 && pairId && (\n              <SwapProChartTrade\n                showChart={showChart}\n                showTrades={showTrades}\n                token1={token1}\n                token2={token2}\n                pairAddress={pairId}\n                pairTokenReversed={pairTokenReversed}\n                transactions={transactions}\n              />\n            )}\n          </Box>\n          {infoPos === 'right' && (\n            <Box\n              className={isMobile ? 'border-top' : 'border-left'}\n              width={isTablet ? 1 : 250}\n            >\n              <SwapProInfo\n                token1={token1}\n                token2={token2}\n                transactions={transactions}\n              />\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default SwapPage;\n"],"sourceRoot":""}