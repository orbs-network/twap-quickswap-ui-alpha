{"version":3,"sources":["assets/images/HelpIcon1.svg","assets/images/SettingsIcon.svg","state/twap/hooks.ts","pages/SwapPage/Twap/InfoTooltip.tsx","pages/SwapPage/Twap/LimitPriceInput.tsx","pages/SwapPage/Twap/TimeSelect.tsx","pages/SwapPage/Twap/Duration.tsx","pages/SwapPage/Twap/Interval.tsx","pages/SwapPage/Twap/ChunkSize.tsx","pages/SwapPage/Twap/ErrorNotification.tsx","pages/SwapPage/Twap/useTwapCallback.ts","pages/SwapPage/Twap/ConfirmTwapModal/TxDetails.tsx","pages/SwapPage/Twap/ConfirmTwapModal/Disclaimer.tsx","pages/SwapPage/Twap/ConfirmTwapModal/ModalContent.tsx","pages/SwapPage/Twap/ConfirmTwapModal/ConfirmTwapModal.tsx","pages/SwapPage/Twap/PriceIndication.tsx","pages/SwapPage/Twap/Twap.tsx","pages/SwapPage/SwapMain.tsx","pages/SwapPage/LiquidityPoolRow.tsx","pages/SwapPage/LiquidityPools.tsx","pages/SwapPage/SwapProChart.tsx","pages/SwapPage/SwapProChartTrade.tsx","pages/SwapPage/SwapInfoTx.tsx","pages/SwapPage/SwapProInfo.tsx","pages/SwapPage/SwapProFilter.tsx","pages/SwapPage/SwapPage.tsx"],"names":["_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgHelpIcon1","_ref","svgRef","title","titleId","props","xmlns","width","height","ref","id","d","transform","style","fill","ForwardRef","SvgSettingsIcon","rx","useTwapState","useSelector","state","twap","useTwapActionHandlers","dispatch","useDispatch","onCurrencySelection","useCallback","field","currency","selectCurrency","currencyId","Token","address","ETHER","onSwitchTokens","switchCurrencies","onUserInput","typedValue","typeInput","onChunkSize","value","setChunkSize","onDuration","setDuration","onInInputChange","inputValue","setInInput","onInterval","setInterval","onChangeRecipient","recipient","setRecipient","tryParseAmount","typedValueParsed","parseUnits","decimals","toString","TokenAmount","JSBI","BigInt","CurrencyAmount","ether","error","console","debug","useDerivedTwapInfo","inputError","account","useActiveWeb3React","inputCurrencyId","Field","INPUT","outputCurrencyId","OUTPUT","typedPrice","price","allowLimitPrice","priceAsCurrencyAmount","invertLimitPriceValue","inputCurrency","useCurrency","outputCurrency","relevantTokenBalances","useCurrencyBalances","undefined","parsedAmount","v2Trade","currencyAmountIn","currencyOut","allowedPairs","useAllCommonPairs","inputTokenPrice","useUSDCPrice","outputTokenPrice","useMemo","quote","divide","adjusted","useTradeExactIn","currencyBalances","currencies","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","handlePriceValue","outputAmount","inputAsCurrencyAmount","v1Trade","typedPriceOutputValue","marketPrice","InfoTooltip","text","children","StyledContainer","placement","styled","Box","display","alignItems","gap","LimitPriceInput","onChange","setPrice","formattedPrice","currenciesMemoized","className","StyledTop","StyledTitle","toggled","onToggle","setAllowLimitPrice","setInvertLimitPriceValue","invert","toSignificant","Typography","StyledInputContainer","StyledCurrencyDetails","marginRight","size","disabled","align","placeholder","val","IconButton","onClick","marginLeft","PriceExchangeIcon","justifyContent","borderBottom","marginTop","flexDirection","TimeSelect","selected","onUpdate","margin","StyledRight","displayValue","milliseconds","timeToMilliseconds","type","format","getFormatTypeFromMilliseconds","millisecondsToTime","log","StyledSelect","event","color","opacity","MenuItem","TimeSelectFormat","DAYS","HOURS","MINUTES","Select","theme","palette","primary","main","whiteSpace","Duration","duration","interval","selfEdit","setSelfEdit","paddingRight","ChunkSize","totalChunks","chunkSize","inInput","usdPrice","Number","useEffect","isValidChunkSize","originalValue","StyledCurrency","marginBottom","StyledBottom","toLocaleString","ErrorNotification","SwapCallbackState","handleClose","setTimeout","setError","Snackbar","open","autoHideDuration","onClose","Alert","severity","variant","useTwapCallArguments","trade","allowedSlippage","GlobalConst","utils","INITIAL_ALLOWED_SLIPPAGE","recipientAddressOrName","chainId","library","useENS","recipientAddress","deadline","useTransactionDeadline","contract","useRouterContract","tradeVersion","Version","v2","swapMethods","push","Router","swapCallParameters","feeOnTransfer","Percent","BIPS_BASE","ttl","toNumber","DEFAULT_DEADLINE_FROM_NOW","tradeType","TradeType","EXACT_INPUT","map","parameters","calculateInterval","time","moment","days","hours","minutes","str","TxDetails","limitOrderAllowed","StyledDetails","add","tooltip","formatTokenAmount","fontSize","fontWeight","Row","StyledRow","Disclaimer","ModalContent","onConfirm","useTranslation","t","inputAmount","result","calculatedOutputAmount","StyledCards","currencyAmount","Button","Card","StyledCard","StyledCardTop","getTokenValue","StyledCardBottom","ConfirmTwapModal","originalTrade","onAcceptChanges","onDismiss","swapErrorMessage","isOpen","attemptingTxn","txHash","txPending","showAcceptChanges","Boolean","tradeB","tradeA","currencyEquals","equalTo","modalContent","pendingText","amount1","symbol1","amount2","symbol2","confirmationContent","message","content","hash","PriceIndication","executionPrice","customText","useState","mainPrice","setMainPrice","Twap","currency0","currency1","currencyBgClass","independentField","swapInputError","toggledVersion","useToggledVersion","finalizedTransaction","useTransactionFinalizer","useExpertModeManager","isExpertMode","useWrapCallback","wrapType","onWrap","execute","wrapInputError","allTokens","useAllTokens","showWrap","WrapType","NOT_APPLICABLE","tradesByVersion","v1","useENSAddress","useUserSlippageTolerance","approving","setApproving","useApproveCallbackFromTrade","approval","approveCallback","dependentField","parsedAmounts","formattedAmounts","toExact","route","userHasSpecifiedInputOutput","greaterThan","noRoute","priceImpactWithoutFee","computeTradePriceBreakdown","approvalSubmitted","setApprovalSubmitted","ethereum","window","priceImpactSeverity","warningSeverity","isValid","showApproveFlow","ApprovalState","NOT_APPROVED","PENDING","APPROVED","toggleWalletModal","useWalletModalToggle","handleCurrencySelect","handleOtherCurrencySelect","swapCalls","addTransaction","useTransactionAdder","INVALID","callback","LOADING","VALID","a","Promise","all","methodName","args","options","isZero","estimateGas","then","gasEstimate","catch","gasError","callStatic","Error","callError","errorMessage","reason","estimatedCalls","successfulEstimation","find","el","ix","list","errorCalls","filter","gasLimit","calculateGasMargin","from","response","inputSymbol","outputSymbol","base","withRecipient","isAddress","shortenAddress","withVersion","toUpperCase","summary","code","useTwapCallback","twapCallback","twapCallbackError","swapButtonText","WRAP","UNWRAP","isSupportedNetwork","twapButtonDisabled","showConfirm","tradeToConfirm","setTwapState","handleTypeInput","handleTypeOutput","maxAmountInput","maxAmountSpend","handleMaxInput","handleHalfInput","atMaxAmountInput","handleAcceptChanges","handleConfirmDismiss","handleTwap","confirmPriceImpactWithoutFee","wait","receipt","ReactGA","category","action","label","join","inInputAmount","inInputCurrency","onHalf","onMax","showHalfButton","showMaxButton","otherCurrency","amount","setAmount","bgClass","ExchangeIcon","showPrice","Interval","fullWidth","CircularProgress","StyledButtonContainer","addMaticToMetamask","backgroundImage","SwapMain","swapIndex","setSwapIndex","openSettingsModal","setOpenSettingsModal","useIsProMode","isProMode","updateIsProMode","parsedQuery","useParsedQueryString","my","mr","SettingsIcon","padding","mt","textAlign","Trans","i18nKey","components","bold","alink","rel","href","LiquidityPoolRow","pair","breakpoints","useTheme","daysCurrentYear","getDaysCurrentYear","isMobile","useMediaQuery","down","dayVolumeUSD","oneDayVolumeUSD","oneDayVolumeUntracked","FEEPERCENT","trackReserveUSD","trackedReserveUSD","reserveUSD","apy","isNaN","liquidity","volume","token0","token1","formatCompact","toFixed","React","memo","LiquidityPools","token2","liquidityPoolClosed","setLiquidityPoolClosed","liquidityFilterIndex","setLiquidityFilterIndex","tokenPairs","updateTokenPairs","token1Address","toLowerCase","token2Address","allTokenList","ethPrice","useEthPrice","liquidityPairs","slice","whiteListAddressList","item","getTokenPairs","formattedPairs","includes","getBulkPairData","pairData","KeyboardArrowDown","KeyboardArrowUp","Divider","ind","SwapProChart","pairAddress","pairName","pairTokenReversed","src","frameBorder","SwapProChartTrade","showChart","showTrades","transactions","TradesTable","data","Table","fixedHeaderContent","itemContent","index","tx","txType","amount0In","txAmount0","amount0Out","txAmount1","amount1In","amount1Out","token1Amount","token2Amount","txPrice","amountUSD","dayjs","unix","transaction","timestamp","formatNumber","getEtherscanLink","shortenTx","orientation","minSize","Height","extend","utc","SwapInfoTx","txFilter","setTxFilter","subtractTimeAmount","split","subtractTimeType","firstTime","subtract","filteredTxs","filteredBuyTxs","filteredSellTxs","reduce","total","items","Skeleton","SwapProInfo","token1Data","setToken1Data","token2Data","setToken2Data","unwrappedToken","currency2","oneDayPrice","getTokenInfo","tokenInfo","TokenInfo","tokenData","priceUpPercent","priceChangeUSD","p","ml","flex","priceUSD","py","px","mb","SwapHoriz","SwapProFilter","infoPos","setInfoPos","setShowChart","setShowTrades","infoPosItems","pos","condition","Checkbox","checked","evt","Replay","SwapPage","isTablet","pairId","useDerivedSwapInfo","wrappedCurrency","minHeight","Grid","container","spacing","xs","sm","md","lg","token"],"mappings":"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","file":"static/js/11.eeed30cd.chunk.js","sourcesContent":["var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHelpIcon1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 11469\",\n    d: \"M10.78-7.061c0-1.268-.918-1.919-2.319-1.919a3.829 3.829 0 0 0-2.353.78l.167 1.068a3.446 3.446 0 0 1 2.069-.8c.767 0 1.2.334 1.2.918 0 .617-.417.968-1.6 1.4l-.334.117.133 1.518.784-.15.067-.734c1.218-.396 2.186-.997 2.186-2.198zm-2 5.306V-3.09H7.493v1.335zM.352-5.192a7.851 7.851 0 0 0 7.992 8.008 7.855 7.855 0 0 0 8.008-8.008 7.831 7.831 0 0 0-8.008-7.992A7.827 7.827 0 0 0 .352-5.192zm1.1 0a6.789 6.789 0 0 1 6.891-6.941 6.789 6.789 0 0 1 6.891 6.941 6.793 6.793 0 0 1-6.89 6.957 6.793 6.793 0 0 1-6.891-6.957z\",\n    transform: \"translate(-.352 13.184)\",\n    style: {\n      fill: \"#636780\"\n    }\n  }));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHelpIcon1);\nexport default __webpack_public_path__ + \"static/media/HelpIcon1.66c8c791.svg\";\nexport { ForwardRef as ReactComponent };","var _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSettingsIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Component 37 \\\\u2013 6\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 40,\n    height: 40,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"rect\", {\n    \"data-name\": \"Rectangle 18293\",\n    width: 40,\n    height: 40,\n    rx: 20,\n    style: {\n      fill: \"none\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Settings 2\",\n    d: \"M20 11.823V8.177c-1.79-.638-2.272-.668-2.522-1.274s.069-.974.882-2.686L15.782 1.64c-1.688.8-2.073 1.137-2.687.883S12.456 1.782 11.823 0H8.177C7.541 1.787 7.511 2.271 6.9 2.522c-.627.261-1-.083-2.686-.883L1.64 4.217c.814 1.713 1.135 2.078.882 2.683S1.788 7.541 0 8.177v3.646c1.783.633 2.271.667 2.523 1.273s-.068.972-.883 2.686l2.577 2.578c1.666-.792 2.058-1.144 2.686-.882.607.252.637.733 1.274 2.522h3.645c.632-1.776.666-2.269 1.281-2.526s.988.083 2.679.885l2.578-2.578c-.812-1.708-1.135-2.077-.882-2.686s.733-.635 2.522-1.272zm-4.062.637a3.3 3.3 0 0 0 .407 2.982l-.9.9a3.288 3.288 0 0 0-2.978-.408 3.309 3.309 0 0 0-1.823 2.4H9.362a3.3 3.3 0 0 0-1.819-2.4 3.307 3.307 0 0 0-2.983.407l-.9-.9a3.3 3.3 0 0 0 .406-2.983 3.307 3.307 0 0 0-2.4-1.818V9.362a3.3 3.3 0 0 0 2.4-1.82 3.3 3.3 0 0 0-.407-2.983l.9-.9a3.3 3.3 0 0 0 2.983.407 3.3 3.3 0 0 0 1.819-2.4h1.279a3.3 3.3 0 0 0 1.82 2.4 3.308 3.308 0 0 0 2.983-.407l.9.9a3.307 3.307 0 0 0-.407 2.983 3.3 3.3 0 0 0 2.4 1.819v1.279a3.3 3.3 0 0 0-2.4 1.819zM10 7.5A2.5 2.5 0 1 1 7.5 10 2.5 2.5 0 0 1 10 7.5zm0-1.667A4.167 4.167 0 1 0 14.167 10 4.166 4.166 0 0 0 10 5.833z\",\n    transform: \"translate(10 10)\",\n    style: {\n      fill: \"#696c80\"\n    }\n  }));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettingsIcon);\nexport default __webpack_public_path__ + \"static/media/SettingsIcon.5b7ed28d.svg\";\nexport { ForwardRef as ReactComponent };","//import useENS from 'hooks/useENS';\nimport { parseUnits } from '@ethersproject/units';\nimport {\n  Currency,\n  CurrencyAmount,\n  ETHER,\n  Fraction,\n  JSBI,\n  Price,\n  Token,\n  TokenAmount,\n  Trade,\n} from '@uniswap/sdk';\nimport { ParsedQs } from 'qs';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport { useAllCommonPairs } from 'hooks/Trades';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { isAddress } from 'utils';\nimport { AppDispatch, AppState } from 'state';\nimport { useCurrencyBalances } from 'state/wallet/hooks';\nimport {\n  Field,\n  replaceTwapState,\n  selectCurrency,\n  setChunkSize,\n  setDuration,\n  setInInput,\n  setInterval,\n  setRecipient,\n  switchCurrencies,\n  typeInput,\n} from './actions';\nimport { TwapTimeSelect, TwapState, TimeSelectFormat } from './reducer';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport { computeSlippageAdjustedAmounts } from 'utils/prices';\nimport { handlePriceValue } from './utils';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { BigNumber } from 'ethers';\n\nexport function useTwapState(): AppState['twap'] {\n  return useSelector<AppState, AppState['twap']>((state) => state.twap);\n}\n\nexport function useTwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void;\n  onSwitchTokens: () => void;\n  onUserInput: (field: Field, typedValue: string) => void;\n  onChangeRecipient: (recipient: string | null) => void;\n  onChunkSize: (value?: string) => void;\n  onDuration: (value: TwapTimeSelect) => void;\n  onInterval: (value: TwapTimeSelect) => void;\n  onInInputChange: (inputValue: string, currency?: Currency) => void;\n} {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId:\n            currency instanceof Token\n              ? currency.address\n              : currency === ETHER\n              ? 'ETH'\n              : '',\n        }),\n      );\n    },\n    [dispatch],\n  );\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }));\n    },\n    [dispatch],\n  );\n\n  const onChunkSize = useCallback(\n    (value?: string) => {\n      dispatch(setChunkSize(value));\n    },\n    [dispatch],\n  );\n\n  const onDuration = useCallback(\n    (value: TwapTimeSelect) => {\n      dispatch(setDuration(value));\n    },\n    [dispatch],\n  );\n\n  const onInInputChange = useCallback(\n    (inputValue: string, currency?: Currency) => {\n      dispatch(setInInput({ inputValue, currency }));\n    },\n    [dispatch],\n  );\n\n  const onInterval = useCallback(\n    (value: TwapTimeSelect) => {\n      dispatch(setInterval(value));\n    },\n    [dispatch],\n  );\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }));\n    },\n    [dispatch],\n  );\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n    onChunkSize,\n    onDuration,\n    onInterval,\n    onInInputChange,\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(\n  value?: string,\n  currency?: Currency,\n): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n];\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some(\n      (pair) => pair.liquidityToken.address === checksummedAddress,\n    )\n  );\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedTwapInfo(): {\n  currencies: { [field in Field]?: Currency };\n  currencyBalances: { [field in Field]?: CurrencyAmount };\n  parsedAmount: CurrencyAmount | undefined;\n  v2Trade: Trade | undefined;\n  inputError?: string;\n  v1Trade: Trade | undefined;\n  typedPriceOutputValue: string | undefined;\n  marketPrice?: Fraction;\n} {\n  const { account } = useActiveWeb3React();\n\n  const {\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n    typedPrice,\n    price,\n    allowLimitPrice,\n    priceAsCurrencyAmount,\n    invertLimitPriceValue,\n  } = useTwapState();\n\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n\n  //const recipientLookup = useENS(recipient ?? undefined);\n  const to: string | null = (recipient === null ? account : recipient) ?? null;\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ]);\n\n  const parsedAmount = tryParseAmount(typedValue, inputCurrency ?? undefined);\n\n  const bestTradeExactIn = useTradeExactIn(\n    typedValue,\n    parsedAmount,\n    outputCurrency ?? undefined,\n  );\n\n  const v2Trade = bestTradeExactIn;\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  };\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  };\n\n  let inputError: string | undefined;\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount';\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token';\n  }\n\n  const slippageAdjustedAmounts =\n    v2Trade && computeSlippageAdjustedAmounts(undefined, 0);\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ];\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n\n  const { typedPriceOutputValue, marketPrice } = handlePriceValue({\n    price,\n    typedPrice,\n    typedValue,\n    allowLimitPrice,\n    outputAmount: v2Trade,\n    inputAsCurrencyAmount: parsedAmount,\n    priceAsCurrencyAmount,\n    invertLimitPriceValue,\n  });\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: undefined,\n    inputError,\n    v1Trade: undefined,\n    typedPriceOutputValue,\n    marketPrice,\n  };\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n  return 'ETH' ?? '';\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam))\n    ? urlParam\n    : '';\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output'\n    ? Field.OUTPUT\n    : Field.INPUT;\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): TwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient);\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n    price: undefined,\n    typedPrice: false,\n    duration: {\n      type: TimeSelectFormat.MINUTES,\n    },\n    interval: {\n      type: TimeSelectFormat.MINUTES,\n    },\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | {\n      inputCurrencyId: string | undefined;\n      outputCurrencyId: string | undefined;\n    }\n  | undefined {\n  const { chainId } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState<\n    | {\n        inputCurrencyId: string | undefined;\n        outputCurrencyId: string | undefined;\n      }\n    | undefined\n  >();\n\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n\n    dispatch(\n      replaceTwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n        price: undefined,\n      }),\n    );\n\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n\n  return result;\n}\n\n// const useUSD = (currency: Currency) => {\n//   const res = useUSDCPrice(currency);\n\n//   return  BigNumber.from(res?.toSignificant(6))\n// };\n\nexport function useTradeExactIn(\n  typedValue: string,\n  currencyAmountIn?: CurrencyAmount,\n  currencyOut?: Currency,\n): Fraction | null {\n  const allowedPairs = useAllCommonPairs(\n    currencyAmountIn?.currency,\n    currencyOut,\n  );\n\n  const inputTokenPrice = useUSDCPrice(currencyAmountIn?.currency);\n  const outputTokenPrice = useUSDCPrice(currencyOut);\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (!inputTokenPrice || !outputTokenPrice) {\n        return null;\n      }\n\n      return inputTokenPrice\n        .quote(currencyAmountIn)\n        .divide(outputTokenPrice.adjusted);\n    }\n    return null;\n  }, [\n    allowedPairs,\n    currencyAmountIn,\n    currencyOut,\n    inputTokenPrice,\n    outputTokenPrice,\n  ]);\n}\n","import { CustomTooltip } from 'components';\nimport React, { ReactNode } from 'react';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { Box, styled } from '@material-ui/core';\n\ninterface Props {\n  text: string;\n  children: ReactNode;\n}\n\nfunction InfoTooltip({ text, children }: Props) {\n  if (!text) {\n    return null;\n  }\n  return (\n    <StyledContainer>\n      {children}\n      <CustomTooltip title={text} placement='right'>\n        <HelpOutlineIcon style={{ width: 15 }} />\n      </CustomTooltip>\n    </StyledContainer>\n  );\n}\n\nexport default InfoTooltip;\n\nconst StyledContainer = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 10,\n});\n","import { Box, IconButton, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { Trade } from '@uniswap/sdk';\nimport { CurrencyLogo, NumericalInput, ToggleSwitch } from 'components';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Field,\n  setAllowLimitPrice,\n  setInvertLimitPriceValue,\n  setPrice,\n} from 'state/twap/actions';\nimport {\n  tryParseAmount,\n  useDerivedTwapInfo,\n  useTwapState,\n} from 'state/twap/hooks';\nimport InfoTooltip from './InfoTooltip';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\n\nfunction LimitPriceInput() {\n  const {\n    currencies,\n    typedPriceOutputValue,\n    marketPrice,\n  } = useDerivedTwapInfo();\n  const allowLimitPrice = useTwapState().allowLimitPrice;\n  const invertLimitPriceValue = useTwapState().invertLimitPriceValue;\n  const price = useTwapState().price;\n\n  const dispatch = useDispatch();\n\n  const onChange = (value: string) => {\n    const currency = currencies[Field.INPUT];\n    if (currency) {\n      dispatch(\n        setPrice({\n          price: value,\n          formattedPrice: value ? tryParseAmount(value, currency) : undefined,\n        }),\n      );\n    }\n  };\n\n  const onToggle = () => {\n    dispatch(setAllowLimitPrice(!allowLimitPrice));\n    if (invertLimitPriceValue) {\n      dispatch(setInvertLimitPriceValue(false));\n      onChange('');\n    } else {\n      onChange(marketPrice?.invert().toSignificant(6) || '');\n    }\n  };\n\n  const toggleInvert = () => {\n    dispatch(setInvertLimitPriceValue(!invertLimitPriceValue));\n  };\n\n  const currenciesMemoized = useMemo(() => {\n    if (!invertLimitPriceValue) {\n      return {\n        inputCurrency: currencies[Field.INPUT],\n        outputCurrency: currencies[Field.OUTPUT],\n      };\n    }\n    return {\n      inputCurrency: currencies[Field.OUTPUT],\n      outputCurrency: currencies[Field.INPUT],\n    };\n  }, [currencies, invertLimitPriceValue]);\n\n  const { inputCurrency, outputCurrency } = currenciesMemoized;\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <StyledTop>\n        <StyledTitle>\n          <ToggleSwitch toggled={!!allowLimitPrice} onToggle={onToggle} />\n          <InfoTooltip text='Some text'>\n            <Typography>Limit Price</Typography>\n          </InfoTooltip>\n        </StyledTitle>\n        {!allowLimitPrice && <Typography>None</Typography>}\n      </StyledTop>\n      {allowLimitPrice && (\n        <StyledInputContainer>\n          <StyledCurrencyDetails style={{ marginRight: 5 }}>\n            <CurrencyLogo currency={inputCurrency} size={'28px'} />\n            <Typography>1</Typography>\n            <Typography>{inputCurrency?.symbol}</Typography>\n          </StyledCurrencyDetails>{' '}\n          <Typography>=</Typography>\n          <NumericalInput\n            disabled={!allowLimitPrice}\n            value={price || ''}\n            align='center'\n            placeholder={allowLimitPrice ? '0.00' : 'None'}\n            onUserInput={(val) => {\n              onChange(val);\n            }}\n          />\n          <StyledCurrencyDetails>\n            <Typography>{outputCurrency?.symbol}</Typography>\n            <CurrencyLogo currency={outputCurrency} size={'28px'} />\n          </StyledCurrencyDetails>\n          <IconButton onClick={toggleInvert} style={{ marginLeft: 10 }}>\n            <PriceExchangeIcon />\n          </IconButton>\n        </StyledInputContainer>\n      )}\n    </StyledContainer>\n  );\n}\n\nexport default LimitPriceInput;\n\nconst StyledInputContainer = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  marginLeft: 'auto',\n  '& .styledInput': {\n    width: 150,\n    borderBottom: '1px solid white',\n    marginLeft: 10,\n    marginRight: 10,\n  },\n});\n\nconst StyledCurrencyDetails = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 5,\n});\n\nconst StyledContainer = styled(Box)({\n  marginTop: 5,\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 20,\n});\n\nconst StyledTitle = styled(Box)({\n  marginRight: 10,\n  display: 'flex',\n  alignItems: 'center',\n  gap: 15,\n});\n\nconst StyledTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import {\n  Box,\n  duration,\n  IconButton,\n  MenuItem,\n  Select,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { NumericalInput } from 'components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { TimeSelectFormat, TwapTimeSelect } from 'state/twap/reducer';\nimport InfoTooltip from './InfoTooltip';\nimport {\n  getFormatTypeFromMilliseconds,\n  millisecondsToTime,\n  timeToMilliseconds,\n} from './utils';\n\ninterface Props {\n  selected: TwapTimeSelect;\n  title: string;\n  disabled?: boolean;\n\n  onUpdate: ({\n    type,\n    displayValue,\n    milliseconds,\n  }: {\n    type: TimeSelectFormat;\n    displayValue?: string;\n    milliseconds?: number;\n  }) => void;\n}\n\nfunction TimeSelect({ selected, title, onUpdate, disabled }: Props) {\n  const onChange = (value: string) => {\n    const milliseconds = timeToMilliseconds(selected.type, value) || 0;\n    let displayValue = value;\n\n    if (!milliseconds) {\n      onUpdate({\n        type: selected.type,\n        displayValue,\n        milliseconds,\n      });\n      return;\n    }\n\n    const format = getFormatTypeFromMilliseconds(milliseconds || 0);\n\n    if (format !== selected.type) {\n      displayValue = millisecondsToTime(format, milliseconds) || '';\n      console.log(displayValue, milliseconds);\n    }\n    onUpdate({\n      type: format,\n      displayValue,\n      milliseconds,\n    });\n  };\n\n  const onSelect = (event: any) => {\n    onUpdate({\n      type: event.target.value,\n    });\n  };\n  return (\n    <>\n      <InfoTooltip text='Some text'>\n        <StyledTitle style={{ margin: 0 }}>{title}</StyledTitle>\n      </InfoTooltip>\n\n      <StyledRight>\n        <NumericalInput\n          disabled={disabled}\n          value={selected.displayValue || ''}\n          align='right'\n          placeholder='0.0'\n          onUserInput={(val) => {\n            if (val !== '0' && val !== '.') {\n              onChange(val);\n            }\n          }}\n        />\n        <StyledSelect\n          disabled={disabled}\n          value={selected.type}\n          onChange={onSelect}\n          color='primary'\n          style={{\n            opacity: disabled ? 0.7 : 1,\n          }}\n        >\n          <MenuItem value={TimeSelectFormat.DAYS}>Days</MenuItem>\n          <MenuItem value={TimeSelectFormat.HOURS}>Hours</MenuItem>\n          <MenuItem value={TimeSelectFormat.MINUTES}>Minutes</MenuItem>\n        </StyledSelect>\n      </StyledRight>\n    </>\n  );\n}\n\nexport default TimeSelect;\n\nconst StyledSelect = styled(Select)(({ theme }: { theme: Theme }) => ({\n  color: 'white!important',\n  '&:before': {\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n  },\n  '&:after': {\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n  },\n  '& svg': {\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst StyledRight = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  gap: 20,\n  '& .styledInput': {},\n});\n\nconst StyledTitle = styled(Typography)({\n  marginRight: 10,\n  whiteSpace: 'nowrap',\n});\n","import { Box, styled } from '@material-ui/core';\nimport React from 'react';\nimport { useTwapActionHandlers, useTwapState } from 'state/twap/hooks';\nimport TimeSelect from './TimeSelect';\n\nfunction Duration() {\n  const { onDuration } = useTwapActionHandlers();\n  const duration = useTwapState().duration;\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <TimeSelect onUpdate={onDuration} selected={duration} title='Duration' />\n    </StyledContainer>\n  );\n}\n\nexport default Duration;\n\nconst StyledContainer = styled(Box)({\n  marginTop: 5,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import { Box, IconButton, styled } from '@material-ui/core';\nimport React from 'react';\nimport { useTwapActionHandlers, useTwapState } from 'state/twap/hooks';\nimport TimeSelect from './TimeSelect';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport { useDispatch } from 'react-redux';\nimport { setSelfEdit } from 'state/twap/actions';\n\nfunction Duration() {\n  const { onInterval } = useTwapActionHandlers();\n  const interval = useTwapState().interval;\n  const selfEdit = useTwapState().selfEdit;\n\n  const dispatch = useDispatch();\n\n  const onEdit = () => {\n    dispatch(setSelfEdit(true));\n  };\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <TimeSelect\n        disabled={!selfEdit}\n        onUpdate={onInterval}\n        selected={interval}\n        title='Trade Interval'\n      />\n      {!selfEdit && (\n        <IconButton onClick={onEdit}>\n          <EditOutlinedIcon color='primary' />\n        </IconButton>\n      )}\n    </StyledContainer>\n  );\n}\n\nexport default Duration;\n\nconst StyledContainer = styled(Box)({\n  marginTop: 5,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  paddingRight: 20,\n});\n","import { Avatar, Box, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport { Currency } from '@uniswap/sdk';\nimport { CurrencyLogo, NumericalInput } from 'components';\nimport React, { useEffect, useState } from 'react';\nimport {\n  useDerivedTwapInfo,\n  useTwapActionHandlers,\n  useTwapState,\n} from 'state/twap/hooks';\nimport { isValidChunkSize } from 'state/twap/utils';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport InfoTooltip from './InfoTooltip';\n\ninterface Props {\n  currency: Currency | undefined;\n}\n\nfunction ChunkSize({ currency }: Props) {\n  const { totalChunks, chunkSize, inInput } = useTwapState();\n  const { onChunkSize } = useTwapActionHandlers();\n  const usdPrice = Number(useUSDCPrice(currency)?.toSignificant() ?? 0);\n\n  const onChange = (value: string) => {\n    onChunkSize(value);\n  };\n\n  useEffect(() => {\n    if (inInput && !isValidChunkSize(inInput, chunkSize)) {\n      onChunkSize(inInput?.originalValue);\n    }\n  }, [inInput, chunkSize, onChunkSize]);\n\n  return (\n    <StyledContainer className={`swapBox bg-secondary2`}>\n      <StyledTop>\n        <InfoTooltip text='Some text'>\n          <StyledTitle style={{ margin: 0 }}>Trade Size</StyledTitle>\n        </InfoTooltip>\n        <NumericalInput\n          value={chunkSize || ''}\n          align='right'\n          placeholder='0.00'\n          onUserInput={(val) => {\n            onChange(val);\n          }}\n        />\n        {currency && (\n          <StyledCurrency style={{ marginBottom: 0 }}>\n            <CurrencyLogo currency={currency} size={'24px'} />\n            {currency?.symbol}\n          </StyledCurrency>\n        )}\n      </StyledTop>\n      <StyledBottom>\n        <small className='text-secondary'>\n          Total trades: {totalChunks?.toString() ?? 0}\n        </small>\n        <small className='text-secondary'>\n          ${chunkSize ? (usdPrice * Number(chunkSize)).toLocaleString() : '0'}\n        </small>\n      </StyledBottom>\n    </StyledContainer>\n  );\n}\n\nexport default ChunkSize;\n\nconst StyledTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  width: '100%',\n});\n\nconst StyledBottom = styled(Box)({\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginTop: 10,\n});\n\nconst StyledContainer = styled(Box)({\n  marginTop: 5,\n  display: 'flex',\n  alignItems: 'center',\n  flexDirection: 'column',\n});\n\nconst StyledTitle = styled(Typography)({\n  marginRight: 10,\n  whiteSpace: 'nowrap',\n});\n\nconst StyledCurrency = styled(Typography)({\n  marginLeft: 20,\n  display: 'flex',\n  gap: 10,\n});\n","import { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useDispatch } from 'react-redux';\nimport { setError } from 'state/twap/actions';\nimport { useTwapState } from 'state/twap/hooks';\nimport React from 'react';\n\nfunction ErrorNotification() {\n  const { error } = useTwapState();\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    setTimeout(() => {\n      dispatch(setError(undefined));\n    }, 400);\n  };\n\n  return (\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity='error' variant='filled'>\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default ErrorNotification;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport {\n  JSBI,\n  Percent,\n  Router,\n  SwapParameters,\n  Trade,\n  TradeType,\n} from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { GlobalConst } from 'constants/index';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport {\n  calculateGasMargin,\n  isZero,\n  isAddress,\n  shortenAddress,\n  formatTokenAmount,\n} from 'utils';\nimport { useActiveWeb3React } from 'hooks';\nimport { useRouterContract } from 'hooks/useContract';\nimport useENS from 'hooks/useENS';\nimport { Version } from 'hooks/useToggledVersion';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract;\n  parameters: SwapParameters;\n}\n\ninterface SuccessfulCall {\n  call: SwapCall;\n  gasEstimate: BigNumber;\n}\n\ninterface FailedCall {\n  call: SwapCall;\n  error: Error;\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall;\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useTwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient =\n    recipientAddressOrName === null ? account : recipientAddress;\n  const deadline = useTransactionDeadline();\n  const contract = useRouterContract();\n\n  return useMemo(() => {\n    const tradeVersion = Version.v2;\n    if (\n      !trade ||\n      !recipient ||\n      !library ||\n      !account ||\n      !tradeVersion ||\n      !chainId\n    )\n      return [];\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(\n              JSBI.BigInt(allowedSlippage),\n              GlobalConst.utils.BIPS_BASE,\n            ),\n            recipient,\n            ttl: deadline\n              ? deadline.toNumber()\n              : GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n          }),\n        );\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(\n                JSBI.BigInt(allowedSlippage),\n                GlobalConst.utils.BIPS_BASE,\n              ),\n              recipient,\n              ttl: deadline\n                ? deadline.toNumber()\n                : GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n            }),\n          );\n        }\n        break;\n    }\n    return swapMethods.map((parameters) => ({ parameters, contract }));\n  }, [\n    account,\n    allowedSlippage,\n    chainId,\n    deadline,\n    library,\n    recipient,\n    trade,\n    contract,\n  ]);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useTwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): {\n  state: SwapCallbackState;\n  callback:\n    | null\n    | (() => Promise<{ response: TransactionResponse; summary: string }>);\n  error: string | null;\n} {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const swapCalls = useTwapCallArguments(\n    trade,\n    allowedSlippage,\n    recipientAddressOrName,\n  );\n\n  const addTransaction = useTransactionAdder();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient =\n    recipientAddressOrName === null ? account : recipientAddress;\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies',\n      };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient',\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null,\n        };\n      }\n    }\n\n    const tradeVersion = Version.v2;\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<{\n        response: TransactionResponse;\n        summary: string;\n      }> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call;\n            const options = !value || isZero(value) ? {} : { value };\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate: gasEstimate.add(100000),\n                };\n              })\n              .catch((gasError) => {\n                console.debug(\n                  'Gas estimate failed, trying eth_call to extract error',\n                  call,\n                );\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.debug(\n                      'Unexpected successful call after failed estimate gas',\n                      call,\n                      gasError,\n                      result,\n                    );\n                    return {\n                      call,\n                      error: new Error(\n                        'Unexpected issue with estimating the gas. Please try again.',\n                      ),\n                    };\n                  })\n                  .catch((callError) => {\n                    console.debug('Call threw error', call, callError);\n                    let errorMessage: string;\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                        break;\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n                    }\n                    return { call, error: new Error(errorMessage) };\n                  });\n              });\n          }),\n        );\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el &&\n            (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        );\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(\n            (call): call is FailedCall => 'error' in call,\n          );\n          if (errorCalls.length > 0)\n            throw errorCalls[errorCalls.length - 1].error;\n          throw new Error(\n            'Unexpected error. Please contact support: none of the calls threw an error',\n          );\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation;\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value)\n            ? { value, from: account }\n            : { from: account }),\n        })\n          .then((response: TransactionResponse) => {\n            const inputSymbol = trade.inputAmount.currency.symbol;\n            const outputSymbol = trade.outputAmount.currency.symbol;\n            const inputAmount = formatTokenAmount(trade.inputAmount);\n            const outputAmount = formatTokenAmount(trade.outputAmount);\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`;\n\n            const withVersion =\n              tradeVersion === Version.v2\n                ? withRecipient\n                : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`;\n\n            addTransaction(response, {\n              summary: withVersion,\n            });\n\n            return { response, summary: withVersion };\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.');\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value);\n              throw new Error(`Swap failed: ${error.message}`);\n            }\n          });\n      },\n      error: null,\n    };\n  }, [\n    trade,\n    library,\n    account,\n    chainId,\n    recipient,\n    recipientAddressOrName,\n    swapCalls,\n    addTransaction,\n  ]);\n}\n","import { Box, styled, Tooltip, Typography } from '@material-ui/core';\nimport { CurrencyAmount } from '@uniswap/sdk';\nimport { CustomTooltip } from 'components';\nimport moment, { Duration } from 'moment';\nimport React from 'react';\nimport { useTwapState } from 'state/twap/hooks';\nimport { formatTokenAmount } from 'utils';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nconst calculateInterval = (value?: number) => {\n  if (!value) {\n    return '0';\n  }\n  const time = moment.duration(value);\n  const days = time.days();\n  const hours = time.hours();\n  const minutes = time.minutes();\n\n  let str = '';\n\n  if (days) {\n    str += `${days} Days `;\n  }\n  if (hours) {\n    str += `${hours} Hours `;\n  }\n  if (minutes) {\n    str += `${minutes} Minutes`;\n  }\n  return str;\n};\n\ninterface Props {\n  outputAmount: CurrencyAmount;\n  limitOrderAllowed?: boolean;\n}\n\nfunction TxDetails({ outputAmount, limitOrderAllowed }: Props) {\n  const { duration, totalChunks, interval } = useTwapState();\n\n  return (\n    <StyledDetails className='swapBox bg-secondary2'>\n      <Row\n        title='Expiration date:'\n        value={moment()\n          .add(duration.milliseconds, 'milliseconds')\n          .format('DD/MM/YYYY HH:mm')}\n        tooltip='some text'\n      />\n      <Row\n        title='Minimum Received Per Trade:'\n        value={limitOrderAllowed ? formatTokenAmount(outputAmount) : 'None'}\n        tooltip='some text'\n      />\n\n      <Row title='Total Trades:' value={totalChunks || 0} tooltip='some text' />\n      <Row\n        title='Trade Interval:'\n        value={calculateInterval(interval.milliseconds)}\n        tooltip='some text'\n      />\n    </StyledDetails>\n  );\n}\n\nexport default TxDetails;\n\nconst StyledDetails = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n  '& p': {\n    display: 'flex',\n    alignItems: 'center',\n    gap: 10,\n    fontSize: 14,\n    '& span': {\n      fontWeight: 600,\n    },\n  },\n});\n\ntype RowProps = {\n  title: string;\n  value: string | number;\n  tooltip?: string;\n};\n\nconst Row = ({ title, value, tooltip }: RowProps) => {\n  return (\n    <StyledRow>\n      {tooltip ? (\n        <CustomTooltip title={tooltip} placement='right'>\n          <Typography>\n            {title} <HelpOutlineIcon style={{ width: 15 }} />\n          </Typography>\n        </CustomTooltip>\n      ) : (\n        <Typography>{title}</Typography>\n      )}\n      <Typography>\n        <span>{value}</span>\n      </Typography>\n    </StyledRow>\n  );\n};\n\nconst StyledRow = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n","import { Box, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/styles';\nimport React from 'react';\n\nfunction Disclaimer() {\n  return (\n    <StyledContainer className='swapBox bg-secondary2'>\n      <Typography variant='h2'>Real Execution Price:</Typography>\n      <Typography>\n        - Your gas fees are paid for by the spread between your specified Price\n        and the Real Execution Price - Gas fees are volatile and thus the exact\n        market price at which your order will execute is unpredictable - It\n        might take much longer than you expected, to reach the price that fills\n        your order + fees Fee on Transfer Tokens: - Fee on transfer tokens\n        should not be used with this system (use at own risk) Expiry Dates: -\n        Your limit order has an expiry date, after which it might not be\n        executed any more\n      </Typography>\n    </StyledContainer>\n  );\n}\n\nexport default Disclaimer;\n\nconst StyledContainer = styled(Box)({\n  marginTop: 15,\n  '& h2': {\n    fontSize: 20,\n    marginBottom: 20,\n  },\n});\n","import { CurrencyAmount, Trade } from '@uniswap/sdk';\nimport React, { useMemo } from 'react';\nimport { Box, Button, styled, Typography } from '@material-ui/core';\nimport { CurrencyLogo } from 'components';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { formatTokenAmount } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { useDerivedTwapInfo, useTwapState } from 'state/twap/hooks';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport { getTokenValue } from 'state/twap/utils';\nimport TxDetails from './TxDetails';\nimport Disclaimer from './Disclaimer';\nimport PriceIndication from '../PriceIndication';\n\nconst calculatedOutputAmount = (\n  trade: Trade,\n  typedPriceOutputValue?: string,\n) => {\n  let result;\n  if (typedPriceOutputValue) {\n    result = tryParseAmount(typedPriceOutputValue, trade.outputAmount.currency);\n  }\n  return result || trade.outputAmount;\n};\n\ninterface ModalContentProps {\n  trade: Trade;\n  allowedSlippage: number;\n  showAcceptChanges: boolean;\n  onAcceptChanges: () => void;\n  onConfirm: () => void;\n}\n\nconst ModalContent: React.FC<ModalContentProps> = ({ trade, onConfirm }) => {\n  const { t } = useTranslation();\n  const { typedPriceOutputValue } = useDerivedTwapInfo();\n  const { allowLimitPrice } = useTwapState();\n\n  const inputAmount = trade.inputAmount;\n  const outputAmount = useMemo(\n    () => calculatedOutputAmount(trade, typedPriceOutputValue),\n    [trade, typedPriceOutputValue],\n  );\n\n  return (\n    <StyledContainer>\n      <StyledCards>\n        <Card currencyAmount={inputAmount} title='From' />\n        <Card currencyAmount={outputAmount} title='To' />\n      </StyledCards>\n      {/* {allowLimitPrice ? (\n        <PriceIndication\n          executionPrice={calculatedPriceInPriceFormat}\n          title='Limit Price'\n        />\n      ) : (\n        <PriceIndication\n          executionPrice={undefined}\n          title='Limit Price'\n          customText='None'\n        />\n      )} */}\n      <TxDetails\n        outputAmount={outputAmount}\n        limitOrderAllowed={allowLimitPrice}\n      />\n      <Disclaimer />\n      <Box className='transactionText'>\n        <Button onClick={onConfirm} className='swapButton'>\n          Confirm Order\n        </Button>\n      </Box>\n    </StyledContainer>\n  );\n};\n\nexport default ModalContent;\n\nconst StyledContainer = styled(Box)({});\n\nconst StyledCards = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 10,\n});\n\ntype CardProps = {\n  currencyAmount: CurrencyAmount;\n  title: string;\n};\n\nconst Card = ({ currencyAmount, title }: CardProps) => {\n  const usdPrice = useUSDCPrice(currencyAmount.currency);\n\n  return (\n    <StyledCard className='swapBox bg-secondary2'>\n      <StyledCardTop>\n        <Typography>{title}</Typography>\n        <Typography>\n          ~$\n          {usdPrice && getTokenValue(usdPrice, currencyAmount)}\n        </Typography>\n      </StyledCardTop>\n      <StyledCardBottom>\n        <StyledCurrency>\n          <CurrencyLogo currency={currencyAmount.currency} size={'24px'} />\n          <Typography>{currencyAmount.currency?.symbol}</Typography>\n        </StyledCurrency>\n        <Typography>{formatTokenAmount(currencyAmount)}</Typography>\n      </StyledCardBottom>\n    </StyledCard>\n  );\n};\n\nconst StyledCard = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  flexDirection: 'column',\n  gap: 10,\n});\n\nconst StyledCardBottom = styled(Box)({\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  '& p': {\n    fontSize: 18,\n  },\n});\n\nconst StyledCurrency = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 10,\n});\n\nconst StyledCardTop = styled(Box)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  width: '100%',\n});\n","import { currencyEquals, Trade } from '@uniswap/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  TransactionConfirmationModal,\n  TransactionErrorContent,\n  ConfirmationModalContent,\n} from 'components';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/ConfirmSwapModal.scss';\nimport { useTranslation } from 'react-i18next';\nimport ModalContent from './ModalContent';\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(\n      tradeA.outputAmount.currency,\n      tradeB.outputAmount.currency,\n    ) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  );\n}\n\ninterface ConfirmTwapModalProps {\n  isOpen: boolean;\n  trade: Trade | undefined;\n  originalTrade: Trade | undefined;\n  attemptingTxn: boolean;\n  txPending?: boolean;\n  txHash: string | undefined;\n  recipient: string | null;\n  allowedSlippage: number;\n  onAcceptChanges: () => void;\n  onConfirm: () => void;\n  swapErrorMessage: string | undefined;\n  onDismiss: () => void;\n}\n\nconst ConfirmTwapModal: React.FC<ConfirmTwapModalProps> = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  txPending,\n}) => {\n  const { t } = useTranslation();\n  const showAcceptChanges = useMemo(\n    () =>\n      Boolean(\n        trade &&\n          originalTrade &&\n          tradeMeaningfullyDiffers(trade, originalTrade),\n      ),\n    [originalTrade, trade],\n  );\n\n  const modalContent = useCallback(() => {\n    return trade ? (\n      <ModalContent\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        onConfirm={onConfirm}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null;\n  }, [allowedSlippage, onAcceptChanges, showAcceptChanges, trade, onConfirm]);\n\n  // text to show while loading\n  const pendingText = t('swappingFor', {\n    amount1: formatTokenAmount(trade?.inputAmount),\n    symbol1: trade?.inputAmount?.currency?.symbol,\n    amount2: formatTokenAmount(trade?.outputAmount),\n    symbol2: trade?.outputAmount?.currency?.symbol,\n  });\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <ConfirmationModalContent\n          title={t('confirmTx')}\n          onDismiss={onDismiss}\n          content={modalContent}\n        />\n      ),\n    [t, onDismiss, modalContent, swapErrorMessage],\n  );\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      txPending={txPending}\n      content={confirmationContent}\n      pendingText={pendingText}\n      modalContent={txPending ? t('submittedTxSwap') : t('swapSuccess')}\n    />\n  );\n};\n\nexport default ConfirmTwapModal;\n","import React, { useState } from 'react';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\nimport { Box } from '@material-ui/core';\nimport { Fraction, Price, Trade } from '@uniswap/sdk';\nimport { Field } from 'state/twap/actions';\nimport { useDerivedTwapInfo } from 'state/twap/hooks';\nimport { useTranslation } from 'react-i18next';\n\ninterface Props {\n  executionPrice?: Fraction;\n  title?: string;\n  customText?: string;\n}\n\nfunction PriceIndication({ executionPrice, title, customText }: Props) {\n  const [mainPrice, setMainPrice] = useState(false);\n  const { currencies } = useDerivedTwapInfo();\n\n  return (\n    <Box className='swapPrice'>\n      {title ? <small>{title}:</small> : <small></small>}\n      {customText ? (\n        <small>{customText}</small>\n      ) : (\n        <>\n          <small>\n            1{' '}\n            {\n              (mainPrice ? currencies[Field.INPUT] : currencies[Field.OUTPUT])\n                ?.symbol\n            }{' '}\n            ={' '}\n            {executionPrice ? (\n              <>\n                {(mainPrice\n                  ? executionPrice.invert()\n                  : executionPrice\n                ).toSignificant(6)}{' '}\n                {\n                  (mainPrice\n                    ? currencies[Field.OUTPUT]\n                    : currencies[Field.INPUT]\n                  )?.symbol\n                }{' '}\n              </>\n            ) : (\n              'Market price '\n            )}\n            <PriceExchangeIcon\n              onClick={() => {\n                setMainPrice(!mainPrice);\n              }}\n            />\n          </small>\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default PriceIndication;\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Currency, CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk';\nimport ReactGA from 'react-ga';\nimport { ArrowDown } from 'react-feather';\nimport { Box, Button, CircularProgress, styled } from '@material-ui/core';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport {\n  useDerivedTwapInfo,\n  useTwapActionHandlers,\n  useTwapState,\n} from 'state/twap/hooks';\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n} from 'state/user/hooks';\nimport { Field } from 'state/swap/actions';\nimport { useAllTokens } from 'hooks/Tokens';\nimport { CurrencyInput, AdvancedSwapDetails, AddressInput } from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport {\n  ApprovalState,\n  useApproveCallbackFromTrade,\n} from 'hooks/useApproveCallback';\nimport { useTransactionFinalizer } from 'state/transactions/hooks';\nimport useENSAddress from 'hooks/useENSAddress';\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback';\nimport useToggledVersion, { Version } from 'hooks/useToggledVersion';\nimport {\n  addMaticToMetamask,\n  isSupportedNetwork,\n  confirmPriceImpactWithoutFee,\n  maxAmountSpend,\n} from 'utils';\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\nimport { ReactComponent as ExchangeIcon } from 'assets/images/ExchangeIcon.svg';\nimport 'components/styles/Swap.scss';\nimport { useTranslation } from 'react-i18next';\nimport LimitPriceInput from './LimitPriceInput';\nimport Duration from './Duration';\nimport Interval from './Interval';\nimport ChunkSize from './ChunkSize';\nimport { BigNumber } from 'ethers';\nimport ErrorNotification from './ErrorNotification';\nimport Orders from './Orders/Orders';\nimport { useTwapCallback } from './useTwapCallback';\nimport ConfirmTwapModal from './ConfirmTwapModal';\nimport PriceIndication from './PriceIndication';\n\nconst Twap: React.FC<{\n  currency0?: Currency;\n  currency1?: Currency;\n  currencyBgClass?: string;\n}> = ({ currency0, currency1, currencyBgClass }) => {\n  const { t } = useTranslation();\n  const { account } = useActiveWeb3React();\n  const { independentField, typedValue, recipient } = useTwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n    typedPriceOutputValue,\n    marketPrice,\n  } = useDerivedTwapInfo();\n\n  const toggledVersion = useToggledVersion();\n  const finalizedTransaction = useTransactionFinalizer();\n  const [isExpertMode] = useExpertModeManager();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue,\n  );\n  const allTokens = useAllTokens();\n\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE;\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade,\n  };\n\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n    onInInputChange,\n  } = useTwapActionHandlers();\n\n  const { address: recipientAddress } = useENSAddress(recipient);\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const [approving, setApproving] = useState(false);\n  const [approval, approveCallback] = useApproveCallbackFromTrade(\n    trade,\n    allowedSlippage,\n  );\n\n  console.log({ approval });\n\n  const dependentField: Field =\n    independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const parsedAmounts = useMemo(() => {\n    return showWrap\n      ? {\n          [Field.INPUT]: parsedAmount,\n          [Field.OUTPUT]: parsedAmount,\n        }\n      : {\n          [Field.INPUT]:\n            independentField === Field.INPUT\n              ? parsedAmount\n              : trade?.inputAmount,\n          [Field.OUTPUT]:\n            independentField === Field.OUTPUT\n              ? parsedAmount\n              : trade?.outputAmount,\n        };\n  }, [parsedAmount, independentField, trade, showWrap]);\n\n  const formattedAmounts = useMemo(() => {\n    return {\n      [independentField]: typedValue,\n      [dependentField]: showWrap\n        ? parsedAmounts[independentField]?.toExact() ?? ''\n        : parsedAmounts[dependentField]?.toExact() ?? '',\n    };\n  }, [independentField, typedValue, dependentField, showWrap, parsedAmounts]);\n\n  const route = trade?.route;\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] &&\n      currencies[Field.OUTPUT] &&\n      parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\n  );\n  const noRoute = !route;\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade);\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n  const { ethereum } = window as any;\n  const [mainPrice, setMainPrice] = useState(true);\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n  const isValid = !swapInputError;\n\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode);\n\n  const toggleWalletModal = useWalletModalToggle();\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleCurrencySelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection],\n  );\n\n  const handleOtherCurrencySelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection],\n  );\n\n  const { callback: twapCallback, error: twapCallbackError } = useTwapCallback(\n    trade,\n    allowedSlippage,\n    recipient,\n  );\n\n  const swapButtonText = useMemo(() => {\n    if (account) {\n      if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n        return t('selectToken');\n      } else if (\n        formattedAmounts[Field.INPUT] === '' &&\n        formattedAmounts[Field.OUTPUT] === ''\n      ) {\n        return t('enterAmount');\n      } else if (showWrap) {\n        return wrapType === WrapType.WRAP\n          ? t('wrap')\n          : wrapType === WrapType.UNWRAP\n          ? t('unWrap')\n          : '';\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return t('insufficientLiquidityTrade');\n      } else {\n        return swapInputError ?? 'Place order';\n      }\n    } else {\n      return ethereum && !isSupportedNetwork(ethereum)\n        ? t('switchPolygon')\n        : t('connectWallet');\n    }\n  }, [\n    t,\n    formattedAmounts,\n    currencies,\n    account,\n    ethereum,\n    noRoute,\n    userHasSpecifiedInputOutput,\n    showWrap,\n    wrapType,\n    swapInputError,\n  ]);\n\n  const twapButtonDisabled = useMemo(() => {\n    if (account) {\n      if (showWrap) {\n        return Boolean(wrapInputError);\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return true;\n      } else if (showApproveFlow) {\n        return (\n          !isValid ||\n          approval !== ApprovalState.APPROVED ||\n          (priceImpactSeverity > 3 && !isExpertMode)\n        );\n      } else {\n        return (\n          !isValid ||\n          (priceImpactSeverity > 3 && !isExpertMode) ||\n          !!twapCallbackError\n        );\n      }\n    } else {\n      return false;\n    }\n  }, [\n    account,\n    showWrap,\n    wrapInputError,\n    noRoute,\n    userHasSpecifiedInputOutput,\n    showApproveFlow,\n    approval,\n    priceImpactSeverity,\n    isValid,\n    twapCallbackError,\n    isExpertMode,\n  ]);\n\n  const [\n    {\n      showConfirm,\n      txPending,\n      tradeToConfirm,\n      swapErrorMessage,\n      attemptingTxn,\n      txHash,\n    },\n    setTwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    txPending?: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    txPending: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value);\n    },\n    [onUserInput],\n  );\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value);\n    },\n    [onUserInput],\n  );\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(\n    currencyBalances[Field.INPUT],\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleHalfInput = useCallback(() => {\n    maxAmountInput &&\n      onUserInput(\n        Field.INPUT,\n        (Number(maxAmountInput.toExact()) / 2).toString(),\n      );\n  }, [maxAmountInput, onUserInput]);\n\n  const atMaxAmountInput = Boolean(\n    maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput),\n  );\n\n  const onSwap = () => {\n    if (showWrap && onWrap) {\n      onWrap();\n    } else if (isExpertMode) {\n      handleTwap();\n    } else {\n      setTwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        showConfirm: true,\n        txHash: undefined,\n      });\n    }\n  };\n\n  useEffect(() => {\n    onCurrencySelection(Field.INPUT, Token.ETHER);\n  }, [onCurrencySelection, allTokens]);\n\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.INPUT, currency0);\n    }\n    if (currency1) {\n      onCurrencySelection(Field.OUTPUT, currency1);\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n\n  const handleAcceptChanges = useCallback(() => {\n    setTwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n\n  const handleConfirmDismiss = useCallback(() => {\n    setTwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleTwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(priceImpactWithoutFee)\n    ) {\n      return;\n    }\n    if (!twapCallback) {\n      return;\n    }\n    setTwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    twapCallback()\n      .then(async ({ response, summary }) => {\n        setTwapState({\n          attemptingTxn: false,\n          txPending: true,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: response.hash,\n        });\n\n        try {\n          const receipt = await response.wait();\n          finalizedTransaction(receipt, {\n            summary,\n          });\n          setTwapState({\n            attemptingTxn: false,\n            txPending: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: undefined,\n            txHash: response.hash,\n          });\n          ReactGA.event({\n            category: 'Swap',\n            action:\n              recipient === null\n                ? 'Swap w/o Send'\n                : (recipientAddress ?? recipient) === account\n                ? 'Swap w/o Send + recipient'\n                : 'Swap w/ Send',\n            label: [\n              trade?.inputAmount?.currency?.symbol,\n              trade?.outputAmount?.currency?.symbol,\n            ].join('/'),\n          });\n        } catch (error) {\n          setTwapState({\n            attemptingTxn: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: (error as any).message,\n            txHash: undefined,\n          });\n        }\n      })\n      .catch((error) => {\n        setTwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [\n    tradeToConfirm,\n    account,\n    priceImpactWithoutFee,\n    recipient,\n    recipientAddress,\n    showConfirm,\n    twapCallback,\n    finalizedTransaction,\n    trade,\n  ]);\n\n  const inInputAmount = formattedAmounts[Field.INPUT];\n  const inInputCurrency = currencies[Field.INPUT];\n\n  useEffect(() => {\n    onInInputChange(inInputAmount, inInputCurrency);\n  }, [inInputAmount, inInputCurrency, onInInputChange]);\n\n  return (\n    <Box>\n      <ErrorNotification />\n      {showConfirm && (\n        <ConfirmTwapModal\n          isOpen={showConfirm}\n          trade={trade}\n          originalTrade={tradeToConfirm}\n          onAcceptChanges={handleAcceptChanges}\n          attemptingTxn={attemptingTxn}\n          txPending={txPending}\n          txHash={txHash}\n          recipient={recipient}\n          allowedSlippage={allowedSlippage}\n          onConfirm={handleTwap}\n          swapErrorMessage={swapErrorMessage}\n          onDismiss={handleConfirmDismiss}\n        />\n      )}\n      <CurrencyInput\n        title={`${t('from')}:`}\n        id='swap-currency-input'\n        currency={currencies[Field.INPUT]}\n        onHalf={handleHalfInput}\n        onMax={handleMaxInput}\n        showHalfButton={true}\n        showMaxButton={!atMaxAmountInput}\n        otherCurrency={currencies[Field.OUTPUT]}\n        handleCurrencySelect={handleCurrencySelect}\n        amount={formattedAmounts[Field.INPUT]}\n        setAmount={handleTypeInput}\n        bgClass={currencyBgClass}\n      />\n\n      <Box className='exchangeSwap'>\n        <ExchangeIcon onClick={onSwitchTokens} />\n      </Box>\n      <CurrencyInput\n        title={`${t('toEstimate')}:`}\n        id='swap-currency-output'\n        currency={currencies[Field.OUTPUT]}\n        showPrice={Boolean(trade && trade.executionPrice)}\n        showMaxButton={false}\n        otherCurrency={currencies[Field.INPUT]}\n        handleCurrencySelect={handleOtherCurrencySelect}\n        amount={typedPriceOutputValue || formattedAmounts[Field.OUTPUT]}\n        setAmount={handleTypeOutput}\n        bgClass={currencyBgClass}\n        disabled\n      />\n      {marketPrice && (\n        <PriceIndication executionPrice={marketPrice} title='Current Price' />\n      )}\n      <LimitPriceInput />\n      <Duration />\n      <ChunkSize currency={currencies[Field.INPUT]} />\n      <Interval />\n\n      {!showWrap && isExpertMode && (\n        <Box className='recipientInput'>\n          <Box className='recipientInputHeader'>\n            {recipient !== null ? (\n              <ArrowDown size='16' color='white' />\n            ) : (\n              <Box />\n            )}\n            <Button\n              onClick={() => onChangeRecipient(recipient !== null ? null : '')}\n            >\n              {recipient !== null\n                ? `- ${t('removeSend')}`\n                : `+ ${t('addSendOptional')}`}\n            </Button>\n          </Box>\n          {recipient !== null && (\n            <AddressInput\n              label={t('recipient')}\n              placeholder={t('walletOrENS')}\n              value={recipient}\n              onChange={onChangeRecipient}\n            />\n          )}\n        </Box>\n      )}\n      <Box className='swapButtonWrapper'>\n        {showApproveFlow && (\n          <Box width='48%'>\n            <Button\n              fullWidth\n              disabled={\n                approving ||\n                approval !== ApprovalState.NOT_APPROVED ||\n                approvalSubmitted\n              }\n              onClick={async () => {\n                setApproving(true);\n                try {\n                  await approveCallback();\n                  setApproving(false);\n                } catch (err) {\n                  setApproving(false);\n                }\n              }}\n            >\n              {approval === ApprovalState.PENDING ? (\n                <Box className='content'>\n                  {t('approving')} <CircularProgress size={16} />\n                </Box>\n              ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                t('approved')\n              ) : (\n                `${t('approve')} ${currencies[Field.INPUT]?.symbol}`\n              )}\n            </Button>\n          </Box>\n        )}\n        <StyledButtonContainer width={showApproveFlow ? '48%' : '100%'}>\n          <Button\n            fullWidth\n            disabled={twapButtonDisabled as boolean}\n            onClick={account ? onSwap : connectWallet}\n          >\n            {swapButtonText}\n          </Button>\n        </StyledButtonContainer>\n      </Box>\n      {/* <Orders /> */}\n    </Box>\n  );\n};\n\nexport default Twap;\n\nconst StyledButtonContainer = styled(Box)({\n  '& .Mui-disabled': {\n    backgroundImage: 'unset!important',\n    color: 'white!important',\n  },\n});\n","import React, { useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { ReactComponent as SettingsIcon } from 'assets/images/SettingsIcon.svg';\nimport { useIsProMode } from 'state/application/hooks';\nimport useParsedQueryString from 'hooks/useParsedQueryString';\nimport { useCurrency } from 'hooks/Tokens';\nimport { Swap, SettingsModal, ToggleSwitch } from 'components';\nimport {\n  GelatoLimitOrderPanel,\n  GelatoLimitOrdersHistoryPanel,\n} from '@gelatonetwork/limit-orders-react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport Twap from './Twap/Twap';\n\nconst SWAP_NORMAL = 0;\nconst SWAP_LIMIT = 1;\nconst TWAP = 2;\n\nconst SwapMain: React.FC = () => {\n  const [swapIndex, setSwapIndex] = useState(TWAP);\n  const [openSettingsModal, setOpenSettingsModal] = useState(false);\n  const { isProMode, updateIsProMode } = useIsProMode();\n\n  const parsedQuery = useParsedQueryString();\n  const currency0 = useCurrency(\n    parsedQuery && parsedQuery.currency0\n      ? (parsedQuery.currency0 as string)\n      : undefined,\n  );\n  const currency1 = useCurrency(\n    parsedQuery && parsedQuery.currency1\n      ? (parsedQuery.currency1 as string)\n      : undefined,\n  );\n  const { t } = useTranslation();\n\n  console.log(t('market'));\n\n  return (\n    <>\n      {openSettingsModal && (\n        <SettingsModal\n          open={openSettingsModal}\n          onClose={() => setOpenSettingsModal(false)}\n        />\n      )}\n      <Box\n        className={`flex flex-wrap items-center justify-between ${\n          isProMode ? ' proModeWrapper' : ''\n        }`}\n      >\n        <Box display='flex'>\n          <Box\n            className={`${\n              swapIndex === SWAP_NORMAL ? 'activeSwap' : ''\n            } swapItem headingItem\n            `}\n            onClick={() => setSwapIndex(SWAP_NORMAL)}\n          >\n            <p>{t('market')}</p>\n          </Box>\n          <Box\n            className={`${\n              swapIndex === SWAP_LIMIT ? 'activeSwap' : ''\n            } swapItem headingItem ${isProMode ? 'border-right' : ''}`}\n            onClick={() => setSwapIndex(SWAP_LIMIT)}\n          >\n            <p>{t('limit')}</p>\n          </Box>\n          <Box\n            className={`${\n              swapIndex === TWAP ? 'activeSwap' : ''\n            } swapItem headingItem ${isProMode ? 'border-right' : ''}`}\n            onClick={() => setSwapIndex(TWAP)}\n          >\n            <p>{t('twap')}</p>\n          </Box>\n        </Box>\n        <Box my={1} className='flex items-center'>\n          {!isProMode && (\n            <Box className='flex items-center' mr={1}>\n              <span\n                className='text-secondary text-uppercase'\n                style={{ marginRight: 8 }}\n              >\n                {t('proMode')}\n              </span>\n              <ToggleSwitch\n                toggled={isProMode}\n                onToggle={() => updateIsProMode(!isProMode)}\n              />\n            </Box>\n          )}\n          <Box className='headingItem' marginRight={isProMode ? 2.5 : 0}>\n            <SettingsIcon onClick={() => setOpenSettingsModal(true)} />\n          </Box>\n        </Box>\n      </Box>\n      <Box padding={isProMode ? '0 24px' : '0'} mt={3.5}>\n        {swapIndex === SWAP_NORMAL && (\n          <Swap\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n          />\n        )}\n        {swapIndex === SWAP_LIMIT && (\n          <Box className='limitOrderPanel'>\n            <GelatoLimitOrderPanel />\n            <GelatoLimitOrdersHistoryPanel />\n            <Box mt={2} textAlign='center'>\n              <small>\n                <Trans\n                  i18nKey='limitOrderDisclaimer'\n                  components={{\n                    bold: <b />,\n                    alink: (\n                      <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://www.certik.org/projects/gelato'\n                      />\n                    ),\n                  }}\n                />\n              </small>\n            </Box>\n          </Box>\n        )}\n        {swapIndex === TWAP && (\n          <Twap\n            currency0={currency0 ?? undefined}\n            currency1={currency1 ?? undefined}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default SwapMain;\n","import React from 'react';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { GlobalConst } from 'constants/index';\nimport { DoubleCurrencyLogo } from 'components';\nimport { formatCompact, getDaysCurrentYear } from 'utils';\nimport { useCurrency } from 'hooks/Tokens';\nimport { useTranslation } from 'react-i18next';\n\nconst LiquidityPoolRow: React.FC<{\n  pair: any;\n  key: number;\n}> = ({ pair, key }) => {\n  const { breakpoints } = useTheme();\n  const daysCurrentYear = getDaysCurrentYear();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const { t } = useTranslation();\n\n  const dayVolumeUSD =\n    Number(\n      pair.oneDayVolumeUSD ? pair.oneDayVolumeUSD : pair.oneDayVolumeUntracked,\n    ) *\n    GlobalConst.utils.FEEPERCENT *\n    daysCurrentYear *\n    100;\n  const trackReserveUSD = Number(\n    pair.oneDayVolumeUSD ? pair.trackedReserveUSD : pair.reserveUSD,\n  );\n  const apy =\n    isNaN(dayVolumeUSD) || trackReserveUSD === 0\n      ? 0\n      : dayVolumeUSD / trackReserveUSD;\n  const liquidity = pair.trackedReserveUSD\n    ? pair.trackedReserveUSD\n    : pair.reserveUSD;\n  const volume = pair.oneDayVolumeUSD\n    ? pair.oneDayVolumeUSD\n    : pair.oneDayVolumeUntracked;\n  const token0 = useCurrency(pair.token0.id);\n  const token1 = useCurrency(pair.token1.id);\n  return (\n    <Box key={key} className='liquidityContent'>\n      <Box className='flex items-center' width={isMobile ? 1 : 0.5}>\n        <DoubleCurrencyLogo\n          currency0={token0 ?? undefined}\n          currency1={token1 ?? undefined}\n          size={28}\n        />\n        <small style={{ marginLeft: 12 }}>\n          {pair.token0.symbol.toUpperCase()} /{' '}\n          {pair.token1.symbol.toUpperCase()}\n        </small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.2}\n        mt={isMobile ? 2.5 : 0}\n        className='flex justify-between'\n      >\n        {isMobile && <small className='text-secondary'>{t('tvl')}</small>}\n        <small>${formatCompact(liquidity)}</small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.15}\n        mt={isMobile ? 1 : 0}\n        className='flex justify-between'\n      >\n        {isMobile && <small className='text-secondary'>{t('24hVol')}</small>}\n        <small>${formatCompact(volume)}</small>\n      </Box>\n      <Box\n        width={isMobile ? 1 : 0.15}\n        mt={isMobile ? 1 : 0}\n        className={`flex ${isMobile ? 'justify-between' : 'justify-end'}`}\n      >\n        {isMobile && <small className='text-secondary'>{t('apy')}</small>}\n        <small\n          className={`text-right ${apy < 0 ? 'text-error' : 'text-success'}`}\n        >\n          {apy.toFixed(2)}%\n        </small>\n      </Box>\n    </Box>\n  );\n};\n\nexport default React.memo(LiquidityPoolRow);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Box, Divider, useMediaQuery } from '@material-ui/core';\nimport { KeyboardArrowUp, KeyboardArrowDown } from '@material-ui/icons';\nimport { useTheme } from '@material-ui/core/styles';\nimport { getTokenPairs, getBulkPairData } from 'utils';\nimport { Token } from '@uniswap/sdk';\nimport LiquidityPoolRow from './LiquidityPoolRow';\nimport { useAllTokens } from 'hooks/Tokens';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\nconst LiquidityPools: React.FC<{\n  token1: Token;\n  token2: Token;\n}> = ({ token1, token2 }) => {\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const [liquidityPoolClosed, setLiquidityPoolClosed] = useState(false);\n  const [liquidityFilterIndex, setLiquidityFilterIndex] = useState(0);\n  const [tokenPairs, updateTokenPairs] = useState<any[] | null>(null);\n  const token1Address = token1.address.toLowerCase();\n  const token2Address = token2.address.toLowerCase();\n  const allTokenList = useAllTokens();\n  const { t } = useTranslation();\n  const { ethPrice } = useEthPrice();\n\n  const liquidityPairs = useMemo(\n    () =>\n      tokenPairs\n        ? tokenPairs\n            .filter((pair: any) => {\n              if (liquidityFilterIndex === 0) {\n                return true;\n              } else if (liquidityFilterIndex === 1) {\n                return (\n                  pair.token0.id === token1Address ||\n                  pair.token1.id === token1Address\n                );\n              } else {\n                return (\n                  pair.token0.id === token2Address ||\n                  pair.token1.id === token2Address\n                );\n              }\n            })\n            .slice(0, 5)\n        : [],\n    [tokenPairs, liquidityFilterIndex, token1Address, token2Address],\n  );\n\n  const whiteListAddressList = useMemo(\n    () => Object.keys(allTokenList).map((item) => item.toLowerCase()),\n    [allTokenList],\n  );\n\n  useEffect(() => {\n    if (!ethPrice.price) return;\n    (async () => {\n      const tokenPairs = await getTokenPairs(token1Address, token2Address);\n\n      const formattedPairs = tokenPairs\n        ? tokenPairs\n            .filter((pair: any) => {\n              return (\n                whiteListAddressList.includes(pair?.token0?.id) &&\n                whiteListAddressList.includes(pair?.token1?.id)\n              );\n            })\n            .map((pair: any) => {\n              return pair.id;\n            })\n        : [];\n\n      const pairData = await getBulkPairData(formattedPairs, ethPrice.price);\n\n      if (pairData) {\n        updateTokenPairs(pairData);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token1Address, token2Address, whiteListAddressList, ethPrice.price]);\n\n  return (\n    <>\n      <Box\n        className='flex items-center justify-between'\n        marginBottom={liquidityPoolClosed ? 0 : '20px'}\n      >\n        <Box className='flex items-center'>\n          <p className='weight-600' style={{ marginRight: 8 }}>\n            {t('liquidityPools')}\n          </p>\n          <small className='text-secondary'>\n            ({token1.symbol?.toUpperCase()}, {token2.symbol?.toUpperCase()})\n          </small>\n        </Box>\n        <Box\n          className='flex cursor-pointer text-secondary'\n          onClick={() => setLiquidityPoolClosed(!liquidityPoolClosed)}\n        >\n          {liquidityPoolClosed ? <KeyboardArrowDown /> : <KeyboardArrowUp />}\n        </Box>\n      </Box>\n      {!liquidityPoolClosed && (\n        <>\n          <Divider />\n          <Box width={1}>\n            <Box padding={2} className='flex liquidityMain'>\n              <Box width={0.5} className='flex liquidityFilter'>\n                <small\n                  className={liquidityFilterIndex === 0 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(0)}\n                >\n                  {t('all')}\n                </small>\n                <small\n                  className={liquidityFilterIndex === 1 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(1)}\n                >\n                  {token1.symbol?.toUpperCase()}\n                </small>\n                <small\n                  className={liquidityFilterIndex === 2 ? 'active' : ''}\n                  onClick={() => setLiquidityFilterIndex(2)}\n                >\n                  {token2.symbol?.toUpperCase()}\n                </small>\n              </Box>\n              {!isMobile && (\n                <>\n                  <Box width={0.2}>\n                    <small>{t('tvl')}</small>\n                  </Box>\n                  <Box width={0.15}>\n                    <small>{t('24hVol')}</small>\n                  </Box>\n                  <Box width={0.15} className='text-right'>\n                    <small>{t('apy')}</small>\n                  </Box>\n                </>\n              )}\n            </Box>\n            {liquidityPairs.map((pair: any, ind: any) => (\n              <LiquidityPoolRow pair={pair} key={ind} />\n            ))}\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LiquidityPools;\n","import React from 'react';\n\nconst SwapProChart: React.FC<{\n  pairName: string;\n  pairAddress: string;\n  pairTokenReversed: boolean;\n}> = ({ pairAddress, pairName, pairTokenReversed }) => {\n  return (\n    <iframe\n      src={`https://mode.quickswap.exchange?pairAddress=${pairAddress}&pairName=${pairName}&tokenReversed=${pairTokenReversed}`}\n      height='100%'\n      width='100%'\n      frameBorder='0'\n    />\n  );\n};\n\nexport default React.memo(SwapProChart);\n","import React from 'react';\nimport SwapProChart from './SwapProChart';\nimport { Token } from '@uniswap/sdk';\nimport { Box } from '@material-ui/core';\nimport { Height } from '@material-ui/icons';\nimport { ReflexContainer, ReflexSplitter, ReflexElement } from 'react-reflex';\nimport 'react-reflex/styles.css';\nimport { formatNumber, shortenTx, getEtherscanLink } from 'utils';\nimport dayjs from 'dayjs';\nimport { useActiveWeb3React } from 'hooks';\nimport { TableVirtuoso } from 'react-virtuoso';\nimport { useTranslation } from 'react-i18next';\n\nconst SwapProChartTrade: React.FC<{\n  showChart: boolean;\n  showTrades: boolean;\n  token1: Token;\n  token2: Token;\n  pairAddress: string;\n  pairTokenReversed: boolean;\n  transactions?: any[];\n}> = ({\n  showChart,\n  showTrades,\n  token1,\n  token2,\n  pairAddress,\n  pairTokenReversed,\n  transactions,\n}) => {\n  const { chainId } = useActiveWeb3React();\n  const { t } = useTranslation();\n\n  const TradesTable = () => (\n    <TableVirtuoso\n      data={transactions}\n      components={{\n        Table: ({ ...props }) => <table className='tradeTable' {...props} />,\n      }}\n      fixedHeaderContent={() => (\n        <tr>\n          <th align='left'>{t('date')}</th>\n          <th align='left'>{t('type')}</th>\n          <th align='right'>{t('usd')}</th>\n          <th align='right'>{token1.symbol}</th>\n          <th align='right'>{token2.symbol}</th>\n          <th align='right'>{t('price')}</th>\n          <th align='right'>{t('txn')}</th>\n        </tr>\n      )}\n      itemContent={(index, tx) => {\n        const txType = Number(tx.amount0In) > 0 ? 'sell' : 'buy';\n        const txAmount0 =\n          Number(tx.amount0In) > 0 ? tx.amount0In : tx.amount0Out;\n        const txAmount1 =\n          Number(tx.amount1In) > 0 ? tx.amount1In : tx.amount1Out;\n        const token1Amount =\n          tx.pair.token0.id.toLowerCase() === token1.address.toLowerCase()\n            ? txAmount0\n            : txAmount1;\n        const token2Amount =\n          tx.pair.token0.id.toLowerCase() === token1.address.toLowerCase()\n            ? txAmount1\n            : txAmount0;\n        const txPrice = Number(tx.amountUSD) / token1Amount;\n        return (\n          <>\n            <td align='left'>\n              {dayjs\n                .unix(tx.transaction.timestamp)\n                .format('MMM DD, hh:mm:ss a')}\n            </td>\n            <td className={txType} align='left'>\n              {txType.toUpperCase()}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(tx.amountUSD)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(token1Amount)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(token2Amount)}\n            </td>\n            <td className={txType} align='right'>\n              {formatNumber(txPrice)}\n            </td>\n            <td className={txType} align='right'>\n              {chainId ? (\n                <a\n                  href={getEtherscanLink(\n                    chainId,\n                    tx.transaction.id,\n                    'transaction',\n                  )}\n                  target='_blank'\n                  rel='noreferrer'\n                >\n                  {shortenTx(tx.transaction.id)}\n                </a>\n              ) : (\n                shortenTx(tx.transaction.id)\n              )}\n            </td>\n          </>\n        );\n      }}\n    />\n  );\n\n  return (\n    <ReflexContainer orientation='horizontal'>\n      {showChart && (\n        <ReflexElement className='top-pane' minSize={200}>\n          <SwapProChart\n            pairName={`${token1.symbol}/${token2.symbol}`}\n            pairAddress={pairAddress}\n            pairTokenReversed={pairTokenReversed}\n          />\n        </ReflexElement>\n      )}\n      {showChart && showTrades && (\n        <ReflexSplitter>\n          <Box\n            width={1}\n            height='2px'\n            className='flex justify-center items-center'\n          >\n            <Height />\n          </Box>\n        </ReflexSplitter>\n      )}\n      {showTrades && (\n        <ReflexElement className='bottom-pane' minSize={200}>\n          <TradesTable />\n        </ReflexElement>\n      )}\n    </ReflexContainer>\n  );\n};\n\nexport default React.memo(SwapProChartTrade);\n","import React, { useState } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { ButtonSwitch } from 'components';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { formatCompact, formatNumber } from 'utils';\nimport { useTranslation } from 'react-i18next';\ndayjs.extend(utc);\n\nconst SwapInfoTx: React.FC<{\n  transactions?: any[];\n}> = ({ transactions }) => {\n  const [txFilter, setTxFilter] = useState('5_minute');\n  const subtractTimeAmount = Number(txFilter.split('_')[0]);\n  const subtractTimeType = txFilter.split('_')[1];\n  const currentTime = dayjs.utc();\n  const firstTime = currentTime\n    .subtract(subtractTimeAmount, subtractTimeType)\n    .unix();\n\n  const filteredTxs = transactions?.filter(\n    (tx) => tx.transaction.timestamp >= firstTime,\n  );\n  const filteredBuyTxs = filteredTxs?.filter((tx) => Number(tx.amount1In) > 0);\n  const filteredSellTxs = filteredTxs?.filter((tx) => Number(tx.amount0In) > 0);\n  const volume = filteredTxs\n    ? filteredTxs.reduce((total, tx) => total + Number(tx.amountUSD), 0)\n    : undefined;\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <ButtonSwitch\n        height={32}\n        value={txFilter}\n        onChange={setTxFilter}\n        items={[\n          { label: `5${t('min')}`, value: '5_minute' },\n          { label: `1${t('hour')}`, value: '1_hour' },\n          { label: `6${t('hour')}`, value: '6_hour' },\n          { label: `24${t('hour')}`, value: '24_hour' },\n        ]}\n      />\n      <Box className='swapTxInfo'>\n        <Box>\n          <small className='text-secondary'>{t('transactions')}:</small>\n          {filteredTxs ? (\n            <small>{filteredTxs.length}</small>\n          ) : (\n            <Skeleton width={60} height={14} />\n          )}\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('buys')}:</small>\n          <small>\n            {filteredBuyTxs ? (\n              filteredBuyTxs.length\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('sells')}:</small>\n          <small>\n            {filteredSellTxs ? (\n              filteredSellTxs.length\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n        <Divider />\n        <Box>\n          <small className='text-secondary'>{t('volume')}:</small>\n          <small>\n            {filteredTxs ? (\n              volume > 1000 ? (\n                formatCompact(volume)\n              ) : (\n                formatNumber(volume)\n              )\n            ) : (\n              <Skeleton width={60} height={14} />\n            )}\n          </small>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default React.memo(SwapInfoTx);\n","import React, { useState, useEffect } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { SwapHoriz } from '@material-ui/icons';\nimport { Currency, Token } from '@uniswap/sdk';\nimport { CurrencyLogo } from 'components';\nimport { getTokenInfo, formatNumber } from 'utils';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SwapInfoTx from './SwapInfoTx';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\nconst SwapProInfo: React.FC<{\n  token1?: Token;\n  token2?: Token;\n  transactions?: any[];\n}> = ({ token1, token2, transactions }) => {\n  const { t } = useTranslation();\n  const [token1Data, setToken1Data] = useState<any>(null);\n  const [token2Data, setToken2Data] = useState<any>(null);\n  const token1Address = token1?.address;\n  const token2Address = token2?.address;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n  const currency2 = token2 ? unwrappedToken(token2) : undefined;\n  const { ethPrice } = useEthPrice();\n\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        if (token1Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token1Address,\n          );\n          if (tokenInfo) {\n            setToken1Data(tokenInfo[0]);\n          }\n        }\n        if (token2Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token2Address,\n          );\n          if (tokenInfo) {\n            setToken2Data(tokenInfo[0]);\n          }\n        }\n      }\n    })();\n  }, [token1Address, token2Address, ethPrice.price, ethPrice.oneDayPrice]);\n\n  const TokenInfo: React.FC<{ currency: Currency; tokenData: any }> = ({\n    currency,\n    tokenData,\n  }) => {\n    const priceUpPercent = Number(tokenData?.priceChangeUSD);\n    return (\n      <>\n        <Box p={1} display='flex'>\n          <CurrencyLogo currency={currency} />\n          <Box ml={1} flex={1}>\n            <Box className='flex justify-between'>\n              <small>{currency.symbol}</small>\n              {tokenData ? (\n                <small>${formatNumber(tokenData?.priceUSD)}</small>\n              ) : (\n                <Skeleton width={60} height={14} />\n              )}\n            </Box>\n            {tokenData ? (\n              <span>\n                {t('24h')}:{' '}\n                <span\n                  className={priceUpPercent > 0 ? 'text-success' : 'text-error'}\n                >\n                  {formatNumber(priceUpPercent)}%\n                </span>\n              </span>\n            ) : (\n              <Skeleton width={60} height={12} />\n            )}\n          </Box>\n        </Box>\n        <Divider />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Box p={1}>\n        <p className='text-uppercase'>{t('info')}:</p>\n      </Box>\n      <Divider />\n      {currency1 && <TokenInfo currency={currency1} tokenData={token1Data} />}\n      {currency2 && <TokenInfo currency={currency2} tokenData={token2Data} />}\n      {currency1 && currency2 && (\n        <>\n          <Box py={2} px={1}>\n            <Box mb={1} px={1} className='flex items-center justify-between'>\n              <small>\n                {currency1.symbol} / {currency2.symbol}\n              </small>\n              <Box className='swapIcon'>\n                <SwapHoriz />\n              </Box>\n            </Box>\n            <SwapInfoTx transactions={transactions} />\n          </Box>\n          <Divider />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(SwapProInfo);\n","import React from 'react';\nimport { Box, Checkbox } from '@material-ui/core';\nimport { Replay } from '@material-ui/icons';\nimport { CustomSwitch } from 'components';\nimport { useTranslation } from 'react-i18next';\n\ninterface SwapProFilterProps {\n  infoPos: string;\n  setInfoPos: (pos: string) => void;\n  showChart: boolean;\n  setShowChart: (value: boolean) => void;\n  showTrades: boolean;\n  setShowTrades: (value: boolean) => void;\n}\n\nconst SwapProFilter: React.FC<SwapProFilterProps> = ({\n  infoPos,\n  setInfoPos,\n  showChart,\n  setShowChart,\n  showTrades,\n  setShowTrades,\n}) => {\n  const { t } = useTranslation();\n  const swapPositions = [t('left'), t('right'), t('none')];\n\n  const infoPosItems = swapPositions.map((pos) => {\n    return {\n      text: pos,\n      onClick: () => setInfoPos(pos),\n      condition: infoPos === pos,\n    };\n  });\n\n  return (\n    <Box className='swapFilter'>\n      <Box className='checkWrapper'>\n        <Checkbox\n          checked={showChart}\n          disabled={!showTrades}\n          onChange={(evt) => setShowChart(evt.target.checked)}\n        />\n        <small>{t('chart')}</small>\n      </Box>\n      <Box className='checkWrapper'>\n        <Checkbox\n          checked={showTrades}\n          disabled={!showChart}\n          onChange={(evt) => setShowTrades(evt.target.checked)}\n        />\n        <small>{t('trades')}</small>\n      </Box>\n      <Box className='flex items-center'>\n        <small className='text-uppercase'>{t('info')}:</small>\n        <Box ml={1}>\n          <CustomSwitch width={190} height={30} items={infoPosItems} />\n        </Box>\n      </Box>\n      <Box\n        className='replayButton'\n        onClick={() => {\n          setInfoPos(t('right'));\n          setShowChart(true);\n          setShowTrades(true);\n        }}\n      >\n        <Replay />\n      </Box>\n    </Box>\n  );\n};\n\nexport default SwapProFilter;\n","import React, { useState, useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Box, Grid, useMediaQuery } from '@material-ui/core';\nimport { ReactComponent as HelpIcon } from 'assets/images/HelpIcon1.svg';\nimport { SwapTokenDetails, ToggleSwitch } from 'components';\nimport { useIsProMode } from 'state/application/hooks';\nimport { useDerivedSwapInfo } from 'state/swap/hooks';\nimport { Field } from 'state/swap/actions';\nimport { getPairAddress, getSwapTransactions } from 'utils';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { useActiveWeb3React } from 'hooks';\nimport SwapMain from './SwapMain';\nimport LiquidityPools from './LiquidityPools';\nimport SwapProChartTrade from './SwapProChartTrade';\nimport SwapProInfo from './SwapProInfo';\nimport SwapProFilter from './SwapProFilter';\nimport { useTranslation } from 'react-i18next';\nimport 'pages/styles/swap.scss';\n\nconst SwapPage: React.FC = () => {\n  const { isProMode, updateIsProMode } = useIsProMode();\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('sm'));\n  const isTablet = useMediaQuery(breakpoints.down('md'));\n  const [showChart, setShowChart] = useState(true);\n  const [showTrades, setShowTrades] = useState(true);\n  const [pairId, setPairId] = useState<string | undefined>(undefined);\n  const [pairTokenReversed, setPairTokenReversed] = useState(false);\n  const [transactions, setTransactions] = useState<any[] | undefined>(\n    undefined,\n  );\n  const [infoPos, setInfoPos] = useState('right');\n\n  const { currencies } = useDerivedSwapInfo();\n  const { chainId } = useActiveWeb3React();\n\n  const token1 = wrappedCurrency(currencies[Field.INPUT], chainId);\n  const token2 = wrappedCurrency(currencies[Field.OUTPUT], chainId);\n\n  const { t } = useTranslation();\n\n  return (\n    <Box width='100%' mb={3} id='swap-page'>\n      {!isProMode && (\n        <Box className='pageHeading'>\n          <h4>{t('swap')}</h4>\n          <Box className='helpWrapper'>\n            <small>{t('help')}</small>\n            <HelpIcon />\n          </Box>\n        </Box>\n      )}\n      {!isProMode ? (\n        <Grid container spacing={4}>\n          <Grid item xs={12} sm={12} md={6} lg={5}>\n            <Box className='wrapper'>\n              <SwapMain />\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={12} md={6} lg={7}>\n            <Box className='flex flex-wrap justify-between fullWidth'>\n              {token1 && (\n                <Box className='swapTokenDetails'>\n                  <SwapTokenDetails token={token1} />\n                </Box>\n              )}\n              {token2 && (\n                <Box className='swapTokenDetails'>\n                  <SwapTokenDetails token={token2} />\n                </Box>\n              )}\n            </Box>\n            {token1 && token2 && (\n              <Box className='wrapper' marginTop='32px'>\n                <LiquidityPools token1={token1} token2={token2} />\n              </Box>\n            )}\n          </Grid>\n        </Grid>\n      ) : (\n        <Box\n          className='border-top border-bottom bg-palette flex flex-wrap'\n          minHeight='calc(100vh - 140px)'\n        >\n          <Box\n            width={isMobile ? 1 : '450px'}\n            padding='20px 0'\n            className={isMobile ? '' : 'border-right'}\n          >\n            <Box\n              className='flex justify-between items-center'\n              padding='0 24px'\n              mb={3}\n            >\n              <h4>{t('swap')}</h4>\n              <Box className='flex items-center' mr={1}>\n                <span\n                  className='text-secondary text-uppercase'\n                  style={{ marginRight: 8 }}\n                >\n                  {t('proMode')}\n                </span>\n                <ToggleSwitch\n                  toggled={isProMode}\n                  onToggle={() => updateIsProMode(!isProMode)}\n                />\n              </Box>\n            </Box>\n            <SwapMain />\n          </Box>\n          {infoPos === 'left' && (\n            <Box\n              className={isMobile ? 'border-top' : 'border-left border-right'}\n              width={isMobile ? 1 : 250}\n            >\n              <SwapProInfo\n                token1={token1}\n                token2={token2}\n                transactions={transactions}\n              />\n            </Box>\n          )}\n          <Box className='swapProWrapper'>\n            <SwapProFilter\n              infoPos={infoPos}\n              setInfoPos={setInfoPos}\n              showChart={showChart}\n              setShowChart={setShowChart}\n              showTrades={showTrades}\n              setShowTrades={setShowTrades}\n            />\n            {token1 && token2 && pairId && (\n              <SwapProChartTrade\n                showChart={showChart}\n                showTrades={showTrades}\n                token1={token1}\n                token2={token2}\n                pairAddress={pairId}\n                pairTokenReversed={pairTokenReversed}\n                transactions={transactions}\n              />\n            )}\n          </Box>\n          {infoPos === 'right' && (\n            <Box\n              className={isMobile ? 'border-top' : 'border-left'}\n              width={isTablet ? 1 : 250}\n            >\n              <SwapProInfo\n                token1={token1}\n                token2={token2}\n                transactions={transactions}\n              />\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default SwapPage;\n"],"sourceRoot":""}