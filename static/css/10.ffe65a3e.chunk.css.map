{"version":3,"sources":["webpack://src/pages/styles/farm.scss","webpack://src/styles/_variables.scss","webpack://src/styles/_breakpoints.scss"],"names":[],"mappings":"AAGA,cACE,kBCOS,CDNT,kBAAA,CACA,YAAA,CACA,iBAAA,CACA,eAAA,CEgNA,oCFrNF,cAOI,iBAAA,CAAA,CAIJ,gBACE,YAAA,CACA,cAAA,CACA,6BAAA,CACA,kBAAA,CACA,kBAAA,CAGF,aACE,YAAA,CACA,cAAA,CACA,aAAA,CACA,kBAAA,CACA,cAAA,CACA,wBCxBU","file":"10.ffe65a3e.chunk.css","sourcesContent":["@use 'styles/variables' as *;\n@use 'styles/breakpoints' as *;\n\n.farmsWrapper {\n  background: $bgPalette;\n  border-radius: 20px;\n  padding: 32px;\n  position: relative;\n  overflow: hidden;\n  @include media(\"screen\", \"<phone\") {\n    padding: 24px 16px\n  }\n}\n\n.farmListHeader {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 28px;\n}\n\n.farmRewards {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 16px 0;\n  border-radius: 10px;\n  padding: 12px 0;\n  background-color: $secondary2;\n}\n","$primary:#448aff;\n$primaryDark:#1C2938;\n$secondary:#344252;\n$secondary1:#252833;\n$secondary2:#232734;\n$secondary3:#2c3242;\n$textPrimary:#c7cad9;\n$textSecondary:#696c80;\n$textDisabled:#626680;\n$textHint:#636780;\n$bgColor:#12131a;\n$bgPalette:#1b1e29;\n$grey1:rgba(99, 103, 128, 0.1);\n$grey2:#3e4252;\n$grey3:#1b1d26;\n$grey4:rgba(68, 138, 255, 0.24);\n$grey5:rgba(225, 190, 231, 0.1);\n$grey6: #c5cbe0;\n$grey7: rgba(255, 255, 255, 0.87);\n$grey8: rgb(27, 32, 43, 0.9);\n$grey9: rgb(43, 45, 59, 0.2);\n$grey10: #1d212c;\n$grey11: rgba(40, 145, 249, 0.1);\n$grey12: #404557;\n$grey13: rgba(0, 0, 0, 0.075);\n$grey14: rgba(105, 108, 128, 0.12);\n$grey15: rgba(27, 30, 41, 0);\n$grey16: rgba(0, 0, 0, 0.01);\n$grey17: rgba(0, 0, 0, 0.04);\n$grey18: #999;\n$grey19: #b6b9cc;\n$grey20: #B4C2D5;\n$grey21: rgba(0, 0, 0, 0.15);\n$grey22: rgba(255, 255, 255, 0.47);\n$grey23: rgba(212, 229, 255, 0.8);\n$grey24: rgba(15, 198, 121, 0.2);\n$grey25: rgb(199, 202, 217);\n$grey26: #444444;\n$grey27: #2c3142;\n$grey28: #2d3447;\n$successMain:#0fc679;\n$successDark:#1DB2D5;\n$successLight:rgba(15, 198, 121, 0.1);\n$errorMain:#ff5252;\n$errorDark:#f00;\n$errorLight:rgba(255, 82, 82, 0.1);\n$divider:rgba(130, 177, 255, 0.08);\n$blue: #3d71ff;\n$blue1: #004ce6;\n$blue2: #0098ff;\n$blue3: #00cff3;\n$blue4: #5294FF;\n$blue5: #4389fd;\n$blue6: rgba(68, 138, 255, 0.3);\n$blue7: rgba(68, 138, 255, 0.5);\n$green1: #64fbd3;\n$green2: rgba(15, 198, 121, 0.12);\n$yellow1: #e59840;\n$yellow2: rgba(255, 160, 0, 0.3);\n$yellow3: #ffa000;\n","$breakpoints: (\n  'phone': 600px, \n  'tablet': 960px, \n  'desktop': 1280px,\n) !default;\n\n$media-expressions: (\n  'screen': 'screen', \n  'print': 'print', \n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)', \n    '(min-resolution: 192dpi)'\n  ), \n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)', \n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n$unit-intervals: (\n  'px': 1, \n  'em': 0.01, \n  'rem': 0.1\n) !default;\n\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n  \n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n    \n  \n    @if $character == '-' {\n      $minus: true;\n    }\n    \n    @else if $character == '.' {\n      $divider: 1;\n    }\n    \n    @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n      \n      @if $divider == 0 {\n        $result: $result * 10;\n      }\n      \n      @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n      \n      $result: $result + $number;\n    }\n  }\n  \n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n  \n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n  \n  @return $number * nth($units, $index);\n}\n\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (type-of($expression) != 'string') {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == '=') {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n    \n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    } \n       \n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}"]}